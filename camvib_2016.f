C     PROGRAM CAMVIB
C        - PERFORMS CALCULATIONS OF NORMAL COORDINATES AND VIBRATIONAL
C     FREQUENCIES FOR MOLECULES WITH UP TO 300 ATOMS
C        - ENABLES TRANSFORMATION OF CARTESIAN FORCE CONSTANTS TO
C     INTERNAL OR SYMMETRY FORCE CONSTANTS
C        - ALLOWS COMPLIANCE CONSTANTS, RELAXED FORCE CONSTANTS AND
C     INTERACTION DISPLACEMENT COORDINATES TO BE COMPUTED
C
C     THIS VERSION    :     MAY 2016
C     UNIFIED VERSION : OCTOBER 2011
C
C     IAN H. WILLIAMS         DEPARTMENT OF CHEMISTRY,
C                             UNIVERSITY OF BATH,
C                             BATH BA2 7AY
C            
C     THIS VERSION USES "CAM_SIZE" TO DETERMINE THE ARRAY SIZES
C  Currently works fine with up to 300 atoms (MAXNAT = 300):
C  -> number of Cartesian coordinates, MAXNC = MAXNAT * 3 = 900
C  -> No. of valence coords, MAXNI = MAXNAT * 3 + MAXNAT / 2  
C  -> no. of independent internal coords, MAXNINT = MAXNC  - 6
C  -> max. length linear array MAXDIAG=MAXNC * MAXNC / 2 + (MAXNC *3 ) / 2 
C  -> parameter(MAXAPO =MAXNAT + 1)
C
C     ALSO ACCEPTS DATA FROM AMPAC "_.RES" FILES, FROM CADPAC AND
C     GAUSSIAN82 "PUNCH" FILES, AND "$HESS" FILES FROM GAMESS.
C
C     22JUN16:  PBW: CHANGE INPUT OF CRD AND FC FOR G09 FORT.7
C     05MAY15:  PBW: REMOVE WT OPTION, CHANGE FORMATTING TO F12.6 FOR X
C     12FEB14:  FIXED SN2 SUBROUTINE ERROR
C     24MAR05:  Correction to SYMEXP
C     16MAR05:  GAUS replaces G82F; SN2METR for SYMEXP as well as SYMIMP 
C     1MAR05 :  minor things for Linux
C     17MAY04 : 6E16.8 format for cartesian force constants ('6E16')
C     20APR04 : new symmetry coordinates for asymmetric trigonal bipyramid;
C               reads Hessian as "camvib" or "camiso/grace" format
C     14APR04 : rare gas atoms added
C     1AUG91  : LMNT DIMENSIONED TO 61
C             : ATOM TYPE '  SP' WITH ATM WT=9999.0 ADDED
C             : FORCE CONSTANT OUTPUT FOR CAMISO CHANGED TO E20.12
C             : COORDINATES ONLY CONVERTED FROM BOHR IF OPTION 13 IS SET
C               IN SUBROUTINE MOLEC
C             : GAMESS COORDINATES AND FORCE CONSTANTS READS FROM .DAT FILE
C               (UNIT 9)
C     13JUN91 : NOW ACCEPTS CARTESIAN FC'S FROM GAMESS $HESS FILE (UNIT 9)
C     1AUG89  : FIX BUG IN COMPAR
C     7JUL89  : INSERT CODE FOR DIHEDRAL COORDINATES IN BMAT
C     5JUL89  : NOW ACCEPTS K AND RB ATOMS
C     19OCT87 : MODIFIED BMAT FOR AMPA WITH LINEAR MOLECULES
C     21OCT87 : MODIFIED FCIN TO CORRECT WRITE TO UNIT 12
C     19JUL88 : MOD. MOLEC & FCIN TO READ CADP PUNCH FILES CORRECTLY
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'CAM_SIZE'     
C     REAL ALPHA,OMEGA
      CHARACTER*4 ITEM(10),WORDS(33),NULL,LABS
      CHARACTER*3 CAMVIB,FIN,PROG
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      LOGICAL OPTION
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /BLOC1/ V(MAXDIAG),EIVR(MAXNC,MAXNC),FREQ(MAXNC)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA CAMVIB,FIN /'VIB','STO'/
      DATA NULL /'    '/
      DATA WORDS /'INCA','ININ','INSY','OUTC','OUTI',
     *            'OUTS','VALE','SYMM','IFCS','SCAL',
     *            'VECT','PRAX','BOHR','DISO','RELX',
     *            'LINE','MASS','FULL','SCVD','REDU',
     *            'SCVA','SCSD','SCSA','OBSD','AMPA',
     *            'CADP','GAUS','EXPL','BREF','GAMS',
     *            'NOPR','GRAC','6E16'/
C
C     START CALCULATIONS
C
C     ALPHA = SECNDS(0.0)
      IR=5
      IW=6
c additions by AJT to print out sizes
      write(iw,*) 'SIZE PRINTOUT'
	  write(iw,*) 'MAXAPO =      ',MAXAPO
      write(iw,*) 'MAX ATOMS     ',maxnat
      write(iw,*) 'MAX CRT-COORDS',maxnc
      write(iw,*) 'MAX INT-COORDS',maxni
      write(iw,*) 'MAX DEG-FREE  ',maxnint
      write(iw,*) 'MAX DIAG/MATRX',maxdiag 
    1 READ(5,100) PROG
      IF(PROG.EQ.FIN) STOP
      IF(PROG.NE.CAMVIB) THEN
                         WRITE(6,201) PROG
                         STOP
      ENDIF
      WRITE(IW,200)
C
C     SPECIFY OPTIONS
C
      DO 2  I=1,33
    2 OPTION(I)= .FALSE.
      READ(IR,101) (ITEM(I),I=1,10)
      I=0
    3 I=I+1
      IF(ITEM(I).NE.NULL) THEN
                          ISOK=0
                          DO 4  J=1,33
                          IF(ITEM(I).EQ.WORDS(J)) THEN
C
C     KEYWORD IS A RECOGNISED OPTION
C
                                     OPTION(J)=.TRUE.
                                     ISOK=1
                          ENDIF
    4                     CONTINUE
                          IF(ISOK.EQ.0) THEN
C
C     KEYWORD IS NOT RECOGNISED
C
                                     WRITE(IW,201) ITEM(I)
                                     STOP
                          ENDIF
                          GO TO 3
      ENDIF
      NO = I - 1
      IF(.NOT. OPTION(2) .AND. .NOT. OPTION(3)) OPTION(1)= .TRUE.
      IF( OPTION(2) .OR. OPTION(3))  OPTION(7)= .TRUE.
      IF( OPTION(3))  OPTION(8)= .TRUE.
      IF(OPTION(8).OR.OPTION(15).OR.OPTION(20)) OPTION(7)=.TRUE.
      IF(OPTION(20)) OPTION(8)=.TRUE.
      IF(OPTION(26)) OPTION(13)=.TRUE.
      IF(OPTION(29).AND..NOT.OPTION(7))OPTION(11)=.FALSE.
      IF(OPTION(18).AND.OPTION(7)) OPTION(9) = .TRUE.
      WRITE(IW,204) (ITEM(I),I=1,NO)
C
C     SELECT ROUTE
C
      CALL MOLEC
      IF(OPTION(12))  CALL PRAX
      IF( .NOT. (OPTION(7) .OR. OPTION(31))) GO TO 7
      CALL BMAT
      CALL SYM
      IF( OPTION(2) .OR. OPTION(3))  CALL FINT
    7 IF( OPTION(1))  CALL FCIN
      IF( OPTION(7) ) CALL PROJEK
      CALL VIB
      IF( OPTION(15))  CALL RELAX
C
C     END CALCULATION
C
C     OMEGA = SECNDS(ALPHA)
C     WRITE(6,202) OMEGA
      WRITE(6,203)
      GO TO 1
  100 FORMAT(1A3)
  101 FORMAT(16(A4,1X))
  200 FORMAT(1X,25('*'),' CAMVIB : VERSION MAY 16 ',
     * 25('*')//)
  201 FORMAT(//' JOB FAILS BECAUSE KEYWORD ',A,' IS UNRECOGNISED')
C 202 FORMAT(//' TOTAL ELAPSED TIME = ',F7.2,' SECONDS')
  203 FORMAT(//1X,30('*'),' THE END ',30('*'))
  204 FORMAT(' OPTIONS SPECIFIED : ',10(A4,1X))
      END
      SUBROUTINE MOLEC
      INCLUDE 'CAM_SIZE'
C     INPUT MOLECULAR GEOMETRY AND ATOMIC MASSES
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION Z(50),G(3,MAXNAT)
      CHARACTER*76 TITLE,CADTIT
      CHARACTER*4  ATOM(50),STAR,SHDG,SUB(3),UNIT(4),IAT(MAXNAT),IA
      CHARACTER*2  ELEM(50),LMNT
      LOGICAL OPTION
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA Z/1.007825D0,2.014102D0,3.016050D0,12.0D0,13.003354826D0,
     * 14.003242D0,14.003074002D0,15.00010897D0,15.99491463D0,
     * 16.9991312D0,17.991603D0,18.998405D0,31.97207070D0,33.96786665D0,
     * 34.96885D0,36.9659D0,6.01513D0,7.01601D0,9.01219D0,10.01294D0,
     * 11.009305D0,28.085611D0,30.97376D0,78.9184D0,80.9163D0,
     * 22.98977D0,999.0D0,24.309846D0,26.98153D0,35.458127D0,
     * 39.09778D0,40.004845D0,65.386887D0,79.906561D0,101.07D0,
     * 126.90435D0,132.9051D0,10.814017D0,1.00790D0,12.01100D0,
     * 14.00670D0,15.99940D0,32.060D0,4.002602D0,20.1797D0,39.948D0,
     * 83.798D0,32.97145843D0,35.96708062D0,11.0114336D0/
      DATA ATOM/'  1H','  2H','  3H',' 12C',' 13C',' 14C',' 14N',
     * ' 15N',' 16O',' 17O',' 18O','   F',' 32S',' 34S','35CL','37CL',
     * ' 6LI',' 7LI',' 9BE',' 10B',' 11B','  SI','   P','79BR','81BR',
     * '  NA','  SP','  MG','  AL','  CL','   K','  CA','  ZN','  BR',
     * '  RU','   I','  CS','   B','   H','   C','   N','   O','   S',
     * '  HE','  NE','  AR','  KR',' 33S',' 36S',' 11C'/
      DATA ELEM/3*' H',3*' C',2*' N',3*' O',' F',2*' S',
     *    2*'CL',2*'LI','BE',2*' B','SI',' P',2*'BR','SP','NA','MG',
     *      'AL','CL',' K','CA','ZN','BR','RU',' I','CS',' B',' H',
     *      ' C',' N',' O',' S','HE','NE','AR','KR',2*' S',' C'/
      DATA SUB/'GEOM','GRAD','CART'/
      DATA UNIT/'ANGS','TROM','BOHR','    '/,  STAR/'*   '/
      DATA AUTOAN/0.5291772D0/
C
      READ(IR,100) TITLE
      WRITE(IW,200) TITLE
      IF(OPTION(4).OR.OPTION(5).OR.OPTION(6))
     *     WRITE(12,200) TITLE
      IU=1
      IF(OPTION(13)) IU=2
      KK=IU*2 - 1
      WRITE(IW,202) UNIT(KK),UNIT(KK+1)
      IF(OPTION(14)) READ(IR,102) IS,IG,IFFREQ
      DO 1  N=1,MAXAPO
C      READ(IR,101) IA,IFK,(X(J,N),J=1,3),WT(N)
      READ(IR,101) IA,IFK,(X(J,N),J=1,3)
C    CHECK PARAMETERS:  WRITE(*,*), N, IA, MAXAPO
      IF(IA.EQ.STAR)  GO TO 3
      IF(OPTION(17)) THEN
C
C     ATOMIC MASS SUPPLIED EXPLICITLY AS WT
C
             LMNT(N) = IA
      ELSE
C
C     ATOMIC MASSES GENERATED IMPLICITLY FROM ISOTOPIC SYMBOLS
C
      IZ=0
      DO 2  M=1,50
    2 IF(ATOM(M).EQ.IA) IZ=M
      IF(IZ.EQ.0) THEN
                  WRITE(IW,207) IA
                  STOP
      ENDIF
      WT(N) = Z(IZ)
      LMNT(N)=ELEM(IZ)
      ENDIF
    1 IAT(N)=IA
    3 NAT=N-1
C
C     ALL ATOMS NOW SPECIFIED
C
      IF(NAT.EQ.0)  THEN
                    WRITE(IW,203)
                    STOP
      ENDIF
      NC=NAT*3
      IF(OPTION(25)) THEN
C
C     READ IN AMPAC CARTESIAN COORDINATES IN ANGSTROMS
C
                     OPEN(UNIT=9,FILE='FOR009',
     *                   STATUS='UNKNOWN',FORM='UNFORMATTED')
                     REWIND 9
                     READ(9) TIME,IPT,REFH
                     READ(9) ((X(J,I),J=1,3),I=1,NAT)
c     ELSEIF (OPTION(30)) THEN
C
C     READ IN GAMESS CARTESIAN COORDINATES IN ANGSTROM
C
C       open (unit=73, file='for073')
C       do 10 i = 1, nat
C        read (73,106) (x(j,i), j = 1,3)
C10      continue
      ELSEIF (OPTION(26)) THEN
C
C     READ IN CADPAC CARTESIAN COORDINATES IN BOHRS
C
                     READ(9,103) CADTIT
                     WRITE(IW,208) CADTIT
                     READ(9,104) SHDG
                     IF(SHDG.NE.SUB(1)) THEN
                                        WRITE(IW,209)
                                        STOP
                     ENDIF
                     READ(9,105)((X(J,I),J=1,3),I=1,NAT)
                     READ(9,104) SHDG
                     IF(SHDG.NE.SUB(2)) THEN
                                         WRITE(IW,209)
                                        STOP
                     ENDIF
                     READ(9,105)((G(J,I),J=1,3),I=1,NAT)
                     SS  = 0.0D0
                     DO 8  I = 1,NAT
                     DO 8  J = 1,3
    8                SS  = SS + G(J,I)**2
                     GNORM = DSQRT(SS/DFLOAT(NC))
                     WRITE(IW,210) GNORM
                     READ(9,104) SHDG
                     IF(SHDG.NE.SUB(3)) THEN
                                        WRITE(IW,209)
                                        STOP
                     ENDIF
C       ELSEIF

      ENDIF
      DO 7  I=1,NAT
    7 WRITE(IW,201)I,LMNT(I),WT(I),(X(J,I),J=1,3)
      NINT=NC-6
      IF(OPTION(16)) NINT=NC-5
      IF(IU.EQ.1) GO TO 6
      IF(OPTION(4)) WRITE(12,204) (IAT(I),(X(J,I),J=1,3),I=1,NAT)
C
C     CONVERT BOHRS TO ANGSTROMS
C
      IF (OPTION(13)) THEN
        DO 4  K=1,NAT
        DO 4  J=1,3
    4   X(J,K) = X(J,K)*AUTOAN
      END IF
      WRITE(IW,202) UNIT(1),UNIT(2)
      DO 5  I=1,NAT
    5 WRITE(IW,201) I,IAT(I),WT(I),(X(J,I),J=1,3)
    6 IF(.NOT. OPTION(14)) RETURN
      WRITE(12,102) IS,IG,IFFREQ,TITLE
      WRITE(12,204) (IAT(I),(X(J,I),J=1,3),I=1,NAT)
      WRITE(12,204) STAR
      RETURN
  100 FORMAT(A74)
C
C
!  101 FORMAT(A4,A1,3F12.6)
  101 FORMAT(A4,A1,3E20.14)
  102 FORMAT(3I2,A74)
  103 FORMAT(A76)
  104 FORMAT(1X,A4)
  105 FORMAT(1X,3E20.12)
  106 FORMAT (5X,3F15.10)
  200 FORMAT(//1X,A)
  201 FORMAT(1X,I2,2X,A4,2X,F10.6,2X,3(3X,F10.6))
  202 FORMAT(//4X,'ATOM',6X,'MASS',11X,'X',12X,'Y',12X,'Z',6X,
     * 2A4//)
  203 FORMAT(//' NO ATOMS HAVE BEEN SPECIFIED')
  204 FORMAT(A4,1X,3F12.7)
C  204 FORMAT(A4,1X,3F14.8)
  207 FORMAT(//' PROGRAM FAILS FOR ATOMIC SPECIES ',A4)
  208 FORMAT(/' TITLE OF PRIOR CADPAC JOB :'/5X,A)
  209 FORMAT(//' CHECK CADPAC PUNCH FILE')
  210 FORMAT(/20X,' R.M.S. GRADIENT = ',E20.12)
      END
      SUBROUTINE BMAT
      INCLUDE 'CAM_SIZE'
C     CALCULATES TRANSFORMATION MATRIX B IN THE MATRIX EQUATION
C     R=BX , WHERE R & X ARE COLUMN VECTORS OF INTERNAL AND
C            CARTESIAN COORDINATES RESPECTIVELY.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION DB(12,3),E1(3),E2(3),E3(3),EN(3)
      INTEGER IBAS(6,MAXNAT),MULT(MAXNAT),LIST(4),LINE(12),NTYP(8)
      CHARACTER*4 LABS,SLAB,PERP,METR
      CHARACTER*2 LMNT
      CHARACTER*1 COORD(8),STAR,TYPE,LAB1
      LOGICAL OPTION
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      COMMON /USE/ IREAD,IW,OPTION(33),NAT,NC,NINT,NI
      DATA COORD/'S','B','W','L','T','D','X','Y'/ ,STAR/'*'/
      DATA PERP, METR /'PERP','METR'/
      DATA ZERO,ONE,TM4 /0.0D0,1.0D0,0.0001D0/
C
C     INITIALIZE ARRAY ELEMENTS TO ZERO
C
      DO 1  I=1,NAT
      DO 2  IB=1,6
    2 IBAS(IB,I)=ZERO
    1 MULT(I)=0
      DO 4  I=1,MAXNI
      DO 4  IC=1,NC
    4 B(I,IC)=ZERO
      DO 44  I=1,8
   44 NTYP(I)=0
      WRITE(IW,2000)
C
C     SPECIFY A "TYPE" OF COORDINATE INVOLVING THE ATOMS IN "LIST"
C
C     TYPES AVAILABLE ARE :
C
C     S     STRETCH
C     B     BEND
C     W     WAG (OUT-OF-PLANE BEND)
C     L     LINEAR BEND
C     T     TORSION
C     D     DIHEDRAL ANGLE
C     X,Y   NOT IMPLEMENTED IN THIS VERSION
C
      II=0
    3 READ(IREAD,1001) TYPE,(LIST(I),I=1,4),SFAC,SLAB
      IF(OPTION(5).OR.OPTION(6)) WRITE(12,1001) TYPE,(LIST(I),I=1,4)
      IF(TYPE.EQ.STAR) GO TO 6
      II=II+1
      IF(SFAC.EQ.ZERO) SFAC=ONE
      SF(II)=SFAC
      DO 45  I=1,4
   45 INCO(I,II)=LIST(I)
      DO 46  IT=1,8
   46 IF(TYPE.EQ.COORD(IT)) ITYP=IT
      NTYP(ITYP)=NTYP(ITYP) + 1
      LAB1(II)= COORD(ITYP)
      LAB2(II)=NTYP(ITYP)
      LABS(II)=SLAB
C
C     BRANCH ACCORDING TO THE TYPE OF COORDINATE IN ORDER TO
C     COMPUTE A ROW OF THE B MATRIX
C
      GO TO (100,200,300,400,500,600,999,999), ITYP
C     STRETCHING COORDINATE FOR BOND P-Q SPECIFIED BY :
C          LIST(1) = P , LIST(2) = Q
  100 NP=LIST(1)
      NQ=LIST(2)
      WRITE(IW,2100) II,LAB1(II),LAB2(II),LMNT(NP),NP,LMNT(NQ),
     * NQ,SF(II)
      LP=(NP-1)*3
      LQ=(NQ-1)*3
      CALL DC(NP,NQ,E1,R1)
      DO 110  L=1,3
      B(II,LP+L)=B(II,LP+L) - E1(L)
  110 B(II,LQ+L)=B(II,LQ+L) + E1(L)
C
C     CONSTRUCT A TOPOLOGICAL MAP OF THE BONDED ATOMS
C
      IF(MULT(NP).EQ.0)  GO TO 120
      DO 130  LA=1,NLA
      IF(IBAS(LA,NP).EQ.NQ)  GO TO 3
  130 CONTINUE
  120 MULT(NP)=MULT(NP)+1
      MULT(NQ)=MULT(NQ)+1
      NLA=MULT(NP)
      NLB=MULT(NQ)
      IBAS(NLA,NP)=NQ
      IBAS(NLB,NQ)=NP
C
C     IBAS    IS AN ARRAY IN WHICH IS STORED INFORMATION CONCERNING
C             THE CONNECTIVITY OF THE MOLECULE
C     MULT    IS AN ARRAY CONTAINING THE MULTIPLICITY OF EACH ATOM
C
      GO TO 3
C
C     BENDING COORDINATE FOR ANGLE P-Q-R SPECIFIED BY :
C        LIST(1) = P , LIST(2) = Q , LIST(3) = R
C     (SEE : WILSON,DECIUS AND CROSS, PAGE 56 )
C
  200 NP=LIST(1)
      NQ=LIST(2)
      NR=LIST(3)
      WRITE(IW,2200) II,LAB1(II),LAB2(II),LMNT(NP),NP,
     * LMNT(NQ),NQ,LMNT(NR),NR,SF(II)
      CALL DC(NQ,NP,E1,QP)
      IP=(NP-1)*3
      IQ=(NQ-1)*3
      IR=(NR-1)*3
      CALL DC(NQ,NR,E2,QR)
      C=DOT(E1,E2)
      S = DSQRT( ONE - C*C )
      IF( S - TM4 ) 999,999,210
  210 DO 220  J=1,3
      BP = ( C*E1(J) - E2(J) ) / (QP*S)
      BR = ( C*E2(J) - E1(J) ) / (QR*S)
      B(II,IP+J)=B(II,IP+J)+BP
      B(II,IQ+J) =B(II,IQ+J) -(BP+BR)
  220 B(II,IR+J)=B(II,IR+J)+BR
      GO TO 3
C
C     OUT-OF-PLANE BENDING COORDINATE FOR FOUR COPLANAR ATOMS,
C     APICAL ATOM Q BONDED TO END ATOM P AND ANCHOR ATOMS R1 AND R2,
C     SPECIFIED BY: LIST(1)=P ,LIST(2)=R1 ,LIST(3)=R2 ,LIST(4)=Q
C     (SEE : MCINTOSH ET AL., CAN.J.CHEM. 56 (1978) 1289 )
C
  300 NP=LIST(1)
      NR1=LIST(2)
      NR2=LIST(3)
      NQ=LIST(4)
      WRITE(IW,2300) II,LAB1(II),LAB2(II),LMNT(NP),NP,
     * LMNT(NQ),NQ,LMNT(NR1),NR1,LMNT(NQ),NQ,LMNT(NR2),NR2,SF(II)
      IP=(NP-1)*3
      IR1=(NR1-1)*3
      IR2=(NR2-1)*3
      IQ=(NQ-1)*3
      CALL DC(NQ,NP,E3,PQ)
      CALL DC(NQ,NR1,E1,R1)
      CALL DC(NQ,NR2,E2,R2)
      CALL CROSS(E1,E2,EN,SP)
      C1=DOT(E3,E2)
      C2=DOT(E3,E1)
      S1=DSQRT(ONE - C1*C1)
      S2=DSQRT(ONE - C2*C2)
      DO 340  J=1,3
      BP = EN(J) / PQ
      BR1= EN(J)*S1 / (R1*SP)
      BR2= EN(J)*S2 / (R2*SP)
      B(II,IP+J)=B(II,IP+J)+BP
      B(II,IR1+J)=B(II,IR1+J)+BR1
      B(II,IR2+J)=B(II,IR2+J)+BR2
  340 B(II,IQ+J)=B(II,IQ+J) -(BP+BR1+BR2)
      GO TO 3
C
C     LINEAR BENDING COORDINATE FOR COLLINEAR ATOMS P-Q-R IN PLANE OF
C     DUMMY ATOM D SPECIFIED BY :
C     LIST(1) = P , LIST(2) = Q , LIST(3) = R , LIST(4) = D
C

  400 NP=LIST(1)
      NQ=LIST(2)
      NR=LIST(3)
      ND=LIST(4)
      IF(ND.LE.NAT) GO TO 401
      X(1,ND) = ZERO
      X(2,ND) = ONE
      X(3,ND) = ZERO
      LMNT(ND)= COORD(7)
  401 WRITE(IW,2400) II,LAB1(II),LAB2(II),LMNT(NP),NP,LMNT(NQ),
     * NQ,LMNT(NR),NR,LMNT(ND),ND,SF(II)
      IP=(NP-1)*3
      IQ=(NQ-1)*3
      IR=(NR-1)*3
      CALL DC(NQ,NP,E1,QP)
      CALL DC(NQ,NR,E2,QR)
      CALL DC(NR,ND,E3,RD)
      CALL CROSS(E2,E3,EN,S)
      CALL CROSS(EN,E2,E1,S)
      DO 410  J=1,3
      BP= -E1(J)/QP
      BR= -E1(J)/QR
      B(II,IP+J)=B(II,IP+J)+ BP
      B(II,IR+J)=B(II,IR+J)+ BR
  410 B(II,IQ+J)=B(II,IQ+J) -(BP+BR)
      II=II+1
      SF(II)=SFAC
      DO 440  I=1,4
  440 INCO(I,II)=INCO(I,II-1)
      NTYP(ITYP)=NTYP(ITYP)+1
      LAB1(II)=COORD(ITYP)
      LAB2(II)=NTYP(ITYP)
      LABS(II)=PERP
      WRITE(IW,2401) II,LAB1(II),LAB2(II),LMNT(NP),NP,LMNT(NQ),
     * NQ,LMNT(NR),NR,SF(II)
      DO 450  J=1,3
      BP= -EN(J)/QP
      BR= -EN(J)/QR
      B(II,IP+J)=B(II,IP+J) + BP
      B(II,IR+J)=B(II,IR+J) + BR
  450 B(II,IQ+J)=B(II,IQ+J) - (BP+BR)
      IF(LABS(II-1).EQ.METR) LABS(II)=METR
      GO TO 3
C
C     TORSIONAL INTERNAL COORDINATE ABOUT BOND J-K
C     SPECIFIED BY :  LIST(1) = J  ,  LIST(2) = K
C     (SEE : WILLIAMS ET AL., J. MOL. STRUCT., 55 (1979) 147 )
C
  500 WRITE(IW,2500) II,LAB1(II),LAB2(II),LMNT(LIST(1)),LIST(1),
     * LMNT(LIST(2)),LIST(2),SF(II)
      DO 590  L=1,12
  590 LINE(L)=0
      DO 570  K=1,3
      DO 570  J=1,12
  570 DB(J,K)=ZERO
C
C     IA,IB  ARE THE 'CENTRAL' ATOMS DEFINING THE BOND ABOUT WHICH
C     TORSION OCCURS
C
      IA=LIST(1)
      IB=LIST(2)
      LINE(1)=IA
      LINE(2)=IB
      ICH=0
      IN=3
      MULTA=MULT(IA)
      MULTB=MULT(IB)
C     SELECT TWO 'TERMINAL' ATOMS, NP AND NQ
      DO 510  LA=1,MULTA
      DO 510  LB=1,MULTB
      NP=IBAS(LA,IA)
      NQ=IBAS(LB,IB)
C
C     CHECK THAT TERMINAL ATOMS ARE NOT CENTRAL ATOMS
C
      IF(NP.EQ.IB.OR.NQ.EQ.IA)  GO TO 510
C
C     CALC. DIRECTION COSINES,VECTOR AND SCALAR PRODUCTS OF BOND VECTORS
C
      CALL DC(NP,IA,E1,R1)
      CALL DC(IA,IB,E2,R2)
      CALL DC(IB,NQ,E3,R3)
      CALL CROSS(E1,E2,EN,SA)
      CA= - DOT(E1,E2)
      CALL CROSS(E3,E2,E1,SB)
      CB= - DOT(E2,E3)
C
C     CHECK FOR THE PRESENCE OF A COLLINEAR SUBSECTION :
C     IF SO THEN REJECT THIS CHAIN
C
      IF(SA*SA - TM4) 510,510,530
  530 IF(SB*SB - TM4) 510,510,520
C
C     ICH   IS THE NUMBER OF FOUR-ATOM CHAINS NOT CONTAINING
C           COLLINEAR SUBSECTIONS
C
  520 ICH=ICH+1
C
C     TEST WHETHER EACH TERMINAL ATOM HAS OCCURRED IN A PREVIOUS CHAIN :
C      IF NOT THEN ADD THE ATOM NUMBER TO LIST
C
      DO 540  L=3,IN
      ITA=L
      IF(NP.EQ.LINE(L)) GO TO 541
  540 CONTINUE
      LINE(IN)=NP
      IN=IN+1
  541 DO 542  L=3,IN
      ITB=L
      IF(NQ.EQ.LINE(L)) GO TO 550
  542 CONTINUE
      LINE(IN)=NQ
      IN=IN+1
C
C     CALCULATE COMPONENTS OF S VECTOR FOR EACH ATOM OF CHAIN
C     (SEE : WILSON,DECIUS AND CROSS, PAGE 60) AND THEN
C     ADD CONTRIBUTIONS FROM THIS CHAIN TO B MATRIX ELEMENTS OBTAINED
C     FROM PREVIOUS CHAINS
C
  550 DO 560  J=1,3
      DELS1 =  -EN(J) / (R1*SA)
      DELS2 =  (EN(J)*(R2 - R1*CA)) / (R1*R2*SA) + (CB*E1(J))/(R2*SB)
      DELS4 =  -E1(J) / (R3*SB)
      DELS3 = -(DELS1+DELS2+DELS4)
      DB(1,J)=DB(1,J) + DELS2
      DB(2,J)=DB(2,J) + DELS3
      DB(ITA,J)=DB(ITA,J) + DELS1
  560 DB(ITB,J)=DB(ITB,J) + DELS4
  510 CONTINUE
C     NUM     IS THE TOTAL NUMBER OF ATOMS IN LIST FOR THIS COORDINATE
      NUM=IN-1
      DO 580  I=1,NUM
      IAT=LINE(I)
      DO 580  J=1,3
      IC=(IAT-1)*3+J
  580 B(II,IC)=B(II,IC) + (DB(I,J)/ICH)
      GO TO 3
C
C      DIHEDRAL ANGLE P-Q-R-S SPECIFIED BY:
C      LIST(1) = P, LIST(2) = Q, LIST(3) = R, LIST(4) = S
C      (SEE: WILSON, DECIUS AND CROSS, PP. 60-61.
C
  600 NP=LIST(1)
      NQ=LIST(2)
      NR=LIST(3)
      NS=LIST(4)
      WRITE(IW,2600) II,LAB1(II),LAB2(II),LMNT(NP),NP,
     * LMNT(NQ),NQ,LMNT(NR),NR,LMNT(NS),NS,SF(II)
      IP=(NP-1)*3
      IQ=(NQ-1)*3
      IR=(NR-1)*3
      IS=(NS-1)*3
      CALL DC(NP,NQ,E1,R1)
      CALL DC(NQ,NR,E2,R2)
      CALL DC(NR,NS,E3,R3)
      CALL CROSS(E1,E2,EN,SA)
      CA = -DOT(E1,E2)
      CALL CROSS(E3,E2,E1,SB)
      CB = -DOT(E2,E3)
      IF( SA*SA .LT. TM4 ) GO TO 999
      IF( SB*SB .LT. TM4 ) GO TO 999
      DO 610 J=1,3
      BP = -EN(J) / (R1*SA)
      B(II,IP+J) = B(II,IP+J) + BP
      BQ =    (EN(J)*(R2-R1*CA))/(R1*R2*SA)+(CB*E1(J))/(R2*SB)
      B(II,IQ+J) = B(II,IQ+J) + BQ
      BS = - E1(J) / (R3*SB)
      B(II,IS+J) = B(II,IS+J) + BS
      B(II,IR+J) = B(II,IR+J) - (BP+BQ+BS)
  610 CONTINUE
      GO TO 3
C
C     END OF VALENCE COORDINATE INPUT
C
    6 NI=II
      IF(.NOT.OPTION(18)) RETURN
      WRITE(IW,2004)
      CALL LAYOUT(B,MAXNI,MAXNC,NI,NC)
      CALL REDUND
      RETURN
  999 WRITE(IW,2007) COORD(ITYP)
      STOP
 1001 FORMAT(A1,4I3,F10.3,A4)
 2000 FORMAT(//' INTERNAL COORDINATES, R',44X,'SCALING'/68X,'FACTORS'/)
 2001 FORMAT(1X,I2,5X,A4,5X,4I3,5X,3(A2,1X))
 2004 FORMAT(//' B MATRIX (TRANSFORMATION FROM CARTESIANS TO INTERNALS',
     * ' :  R  =  B * X  )')
 2007 FORMAT(//' PROGRAM FAILS FOR LAST ',A4,' COORDINATE SPECIFIED')
 2100 FORMAT(1X,I4,2X,A1,I2,2X,'STRETCH',2X,A2,I2,' - ',A2,
     * I2,39X,F6.3)
 2200 FORMAT(1X,I4,2X,A1,I2,2X,'BEND',5X,A2,I2,' - ',A2,I2,
     * ' - ',A2,I2,32X,F6.3)
 2300 FORMAT(1X,I4,2X,A1,I2,2X,'WAG',6X,A2,I2,' - ',A2,I2,2X,
     * 'OUT OF PLANE',2X,A2,I2,' - ',A2,I2,' - ',A2,I2,5X,F6.3)
 2400 FORMAT(1X,I4,2X,A1,I2,2X,'LINEAR BEND ',A2,I2,' - ',
     * A2,I2,' - ',A2,I2,' IN PLANE OF ',A2,I2,12X,F6.3)
 2401 FORMAT(1X,I4,2X,A1,I2,2X,'LINEAR BEND ',A2,I2,' - ',A2,
     * I2,' - ',A2,I2,' IN PERP. PLANE',14X,F6.3)
 2500 FORMAT(1X,I4,2X,A1,I2,2X,'TORSION',2X,A2,I2,' - ',A2,
     * I2,39X,F6.3)
 2600 FORMAT(1X,I4,2X,A1,I2,2X,'DIHEDRAL',1X,A2,I2,' - ',A2,I2,
     * ' - ',A2,I2,' - ',A2,I2,25X,F6.3)
      END
      SUBROUTINE SYM
      INCLUDE 'CAM_SIZE'
C
C     CONSTRUCTION OF TRANSFORMATION MATRIX U FROM VALENCE COORDINATES
C     R TO "SYMMETRY" COORDINATES S,  I.E.    S = U * R  = U * B * X
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL OPTION
      CHARACTER*4 WORD,STAR,LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      DATA ZERO /0.0D0/, STAR/'*   '/
C
C     ARE SYMMETRY COORDINATES REQUIRED ?
C
      IF(OPTION(8)) THEN
C
C     YES : INITIALISE SYMMETRY TRANSFORMATION U 
C
         NN=0
         DO 1  J=1,NC
         DO 1  I=1,NINT
    1    U(I,J) = ZERO
      ELSE
C
C     NO : SET UB = B AND RETURN
C
         IF(NI.EQ.NINT) THEN
           DO 2  J=1,NC
           DO 2  I=1,NINT
    2      UB(I,J)=B(I,J)
           WRITE(IW,202)
           RETURN
        ELSE
          WRITE(IW,203)
          STOP
        ENDIF
      ENDIF
C
C     ARE SYMMETRY COORDINATES TO BE SPECIFIED EXPLICITLY ?
C
      IF(OPTION(28)) THEN
C
C     YES
C
           WRITE(IW,208)
           CALL SYMEXP(NN)
      ELSE
C
C     NO
C
           WRITE(IW,209)
           CALL SYMIMP(NN)
      ENDIF
C
C     ALL SYMMETRY COORDINATES NOW CONSTRUCTED : PRINT U IF REQUIRED
C
      IF(OPTION(22).OR.OPTION(23)) READ(IR,103) (SF(I),I=1,NINT)
      LOW=1
      IF(OPTION(29)) GO TO 5
      WRITE(IW,200)
    3 LHI=LOW+11
      IF(LHI.GT.NINT) LHI=NINT
      WRITE(IW,206)  ( L ,L=LOW,LHI)
      WRITE(IW,204) (LABS(L),L=LOW,LHI)
      WRITE(IW,201)
      DO 4  M=1,NI
    4 WRITE(IW,205) LAB1(M),LAB2(M),(U(L,M),L=LOW,LHI)
      IF(OPTION(22).OR.OPTION(23)) WRITE(IW,207) (SF(I),I=LOW,LHI)
      LOW=LOW+12
      IF(LHI.LT.NINT) GO TO  3
    5 IF(OPTION(22).OR.OPTION(23)) THEN
        READ(IR,101) WORD
        IF(WORD.NE.STAR) STOP
      ENDIF
C
C     CHECK FOR CORRECT NUMBER OF SYMMETRY COORDINATES
C
      IF(NN.EQ.NINT) THEN
C
C     YES : COMPUTE UB = U * B   AND RETURN
C
        DO 6  I=1,NINT
        DO 6  J=1,NC
        UB(I,J)=ZERO
        DO 6  K=1,NI
    6   UB(I,J)=UB(I,J) + U(I,K)*B(K,J)
        RETURN
      ELSE
C
C     NO
C
        WRITE(IW,203)
        STOP
      ENDIF
  101 FORMAT(1A4)
  103 FORMAT(8F10.4)
  200 FORMAT(//' U MATRIX (TRANSFORMATION FROM INTERNAL TO SYMMETRY ',
     * 'COORDINATES :  S  =  U * R  )')
  201 FORMAT(//)
  202 FORMAT(//' SYMMETRY COORDINATES ARE NOT BEING USED')
  203 FORMAT(' PROGRAM FAILS FOR INCORRECT NUMBER OF INTERNAL COORDS')
  204 FORMAT(2X,'R',10X,12(A4,5X))
  205 FORMAT(1X,A1,I2,7X,12(F7.4,2X))
  206 FORMAT(//14X,12(I2,7X))
  207 FORMAT(//' SCALING',3X,12(F7.4,2X))
  208 FORMAT(//' SYMMETRY COORDINATES SPECIFIED EXPLICITLY')
  209 FORMAT(//' SYMMETRY COORDINATES SPECIFIED IMPLICITLY')
      END
      SUBROUTINE SYMEXP(NN)
      INCLUDE 'CAM_SIZE'
C
C     SYMMETRY COORDINATES SPECIFIED EXPLICITLY : EXTRA DATA REQUIRED
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL OPTION
      CHARACTER*4 WORD,TRIG,TET2,TET3,TBPH,TBPA,METR,LABS
C     CHARACTER*4 XTRA 
      CHARACTER*1 LAB1
      INTEGER IROW(MAXNI),NR(9)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      DATA ZERO /0.0D0/
C     DATA XTRA /'XTRA'/
      DATA TRIG,  TET2,  TET3,  TBPH,  TBPA,  METR
     *   /'TRIG','TET2','TET3','TBPH','TBPA','METR'/
C
C     LOOP OVER NUMBER OF INTERNAL DEGREES OF FREEDOM
C
    1 CONTINUE
C
C     READ SYMMETRY-COORDINATE SPECIFICATION ON...
C
      LOW=1
      LHI=30
      IF(NI.LT.30) LHI=NI
      READ(IR,101) WORD,(IROW(J),J=LOW,LHI)
      IF(OPTION(6)) WRITE(12,101) WORD,(IROW(J),J=LOW,LHI)
C
C     ...ONE LINE OF DATA...
C
      IF(NI.GT.30) THEN
        LOW=31
        LHI=60
        IF(NI.LT.60) LHI=NI
        READ(IR,102) (IROW(J),J=LOW,LHI)
        IF(OPTION(6)) WRITE(12,102) (IROW(J),J=LOW,LHI)
C
C       ...OR TWO LINES OF DATA...
C
        IF(NI.GT.60) THEN
          LOW=61
          LHI=90
          IF(NI.LT.90) LHI=NI
          READ(IR,102) (IROW(J),J=LOW,LHI)
          IF(OPTION(6)) WRITE(12,102) (IROW(J),J=LOW,LHI)
C
C         ...OR THREE LINES OF DATA...
C
          IF(NI.GT.90) THEN
            LOW=91
            LHI=120
            IF(NI.LT.120) LHI=NI
            READ(IR,102)(IROW(J),J=LOW,LHI)
            IF(OPTION(6))WRITE(12,102)(IROW(J),J=LOW,LHI)
C
C           ...OR FOUR LINES OF DATA...
C
            IF(NI.GT.120) THEN
              LOW=121
              LHI=140
              IF(NI.LT.140) LHI=NI
              READ(IR,102)(IROW(J),J=LOW,LHI)
              IF(OPTION(6))WRITE(12,102)(IROW(J),J=LOW,LHI)
C
C             ...OR EVEN FIVE LINES OF DATA (NOT TO BE RECOMMENDED)
C
            ENDIF
          ENDIF
        ENDIF
      ENDIF
C
C     CHECK FOR IMPLICIT SYMMETRY-COORDINATE WORDS
C
      IF(WORD.EQ.TRIG) THEN
C
C     IMPLICIT GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE
C     BENDING IN THE PLANE OF A TRIGONAL ATOM
C
        NS=0
        DO 2  J=1,NI
        IF(IROW(J).EQ.0) GO TO 2
        NS=NS+1
        NR(NS)=J
    2   CONTINUE
        CALL TRI(NN,NR)
      ELSEIF (WORD.EQ.TET2.OR.WORD.EQ.TET3) THEN
C
C     IMPLICIT GENERATION OF "SYMMETRY" COORDINATES FOR
C     ANGLE BENDING ABOUT A TETRAVALENT ATOM
C
        NS=0
        DO 3  J=1,NI
        IF(IROW(J).EQ.0) GO TO 3
        NS=NS+1
        NR(NS)=J
    3   CONTINUE
        IF(WORD.EQ.TET2) CALL TET(NN,NR,2)
        IF(WORD.EQ.TET3) CALL TET(NN,NR,3)
      ELSEIF (WORD.EQ.TBPH) THEN
C
C     IMPLICIT GENERATION OF "SYMMETRY" COORDINATES FOR
C     ANGLE BENDING ABOUT A TRIGONAL BIPYRAMIDAL CENTRE
C     POSSESSING C2v SYMMETRY OR HIGHER
C
        NS=0
        DO 4  J=1,NI
        IF(IROW(J).EQ.0) GO TO 4
        NS=NS+1
        NR(NS)=J
    4   CONTINUE
        CALL TBPSYM(NN,NR)
      ELSEIF (WORD.EQ.TBPA) THEN
C
C     IMPLICIT GENERATION OF "SYMMETRY" COORDINATES FOR
C     ANGLE BENDING ABOUT A TRIGONAL BIPYRAMIDAL CENTRE
C     NOT POSSESSING C2v SYMMETRY
C
        NS=0
        DO 8  J=1,NI
        IF(IROW(J).EQ.0) GO TO 8
        NS=NS+1
        NR(NS)=J
    8   CONTINUE
        CALL TBPGEN(NN,NR)
      ELSEIF (WORD.EQ.METR) THEN
C
C     IMPLICIT GENERATION OF "SYMMETRY" COORDINATES FOR
C     ANGLE BENDING ABOUT A PENTAVALENT ATOM USING THE
C     GENERALIZED TREATMENT OF REDUNDANCY GIVEN BY     
C     V. TYPKE, J. MOL. SPECTROSC. (1977) 64, 70-74.
C     FOR A 3-FOLD SYMMETRIC METHYL GROUP TOGETHER WITH
C     AN EXTRA ATOM, FORMING A DISTORTED TRIGONAL BIPYRAMID
C
        NS=0
        DO 9  J=1,NI
        IF(IROW(J).EQ.0) GO TO 9
        NS=NS+1
        NR(NS)=J
    9   CONTINUE
        CALL SN2METR(NN,NR,IS)
C     ELSEIF (WORD.EQ.XTRA) THEN
C
C     SPECIAL SYMMETRY COORDINATES TO DEAL WITH A-A BOND STRETCHING IN
C     AN EXOCYCLICALLY SUBSTITUTED THREE-MEMBERED RING STRUCTURE X=CA2
C
C     THE COORDINATE IS CONSTRUCTED TO BE ORTHOGONAL TO THE REDUNDANCY
C     CONDITION AS DETERMINED BY SUBROUTINE REDUND.
C
C     ****  NOT AVAILABLE IN THIS VERSION  ****
C       NS=0
C       DO 5  J=1,NI
C       IF(IROW(J).EQ.0) GO TO 5
C       NS=NS+1
C       NR(NS)=J
C    5  CONTINUE
C       CALL EXO3(NN,NR)
C       WRITE(IW,202)
C       STOP
      ELSE
C
C     EXPLICIT SPECIFICATION OF A "SYMMETRY" COORDINATE
C
        UMAG=ZERO
        NN=NN+1
        LABS(NN)=WORD
        DO 6  J=1,NI
        UJ=DFLOAT(IROW(J))
    6   UMAG=UMAG + UJ*UJ
        UMAG=DSQRT(UMAG)
        DO 7  J=1,NI
    7   U(NN,J)=DFLOAT(IROW(J))/UMAG
      ENDIF
      IF(NN.LT.NINT) GO TO 1
      RETURN
  101 FORMAT(1A4,30I2)
  102 FORMAT(30I2)
  202 FORMAT(/' SORRY, XTRA IS NOT AVAILABLE IN THIS VERSION')
      END
      SUBROUTINE SYMIMP(NN)
C
C     SYMMETRY COORDINATES GENERATED AUTOMATICALLY FROM DATA
C     ALREADY GIVEN IN LABS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'CAM_SIZE'
      LOGICAL OPTION
      INTEGER NR(9)
      CHARACTER*4 TRIG,TET2,TET3,TBPH,TBPA,METR,LABS
      CHARACTER*1 LAB1
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      DATA TRIG,  TET2,  TET3,  TBPH,  TBPA,  METR
     *   /'TRIG','TET2','TET3','TBPH','TBPA','METR'/
      DATA ONE /1.0D0/
      NS=0
      DO 1  IS=1,NI
      IF(LABS(IS).EQ.TRIG) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.3) THEN
          CALL TRI(NN,NR)
          NS=0
        ENDIF
      ELSEIF (LABS(IS).EQ.TET2) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.6) THEN
          CALL TET(NN,NR,2)
          NS=0
        ENDIF
      ELSEIF (LABS(IS).EQ.TET3) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.6) THEN
          CALL TET(NN,NR,3)
          NS=0
        ENDIF
      ELSEIF (LABS(IS).EQ.TBPH) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.9) THEN
          CALL TBPSYM(NN,NR)
          NS=0
        ENDIF
      ELSEIF (LABS(IS).EQ.TBPA) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.9) THEN
          CALL TBPGEN(NN,NR)
          NS=0
        ENDIF
      ELSEIF (LABS(IS).EQ.METR) THEN
        NS=NS+1
        NR(NS)=IS
        IF(NS.EQ.8) THEN
          CALL SN2METR(NN,NR,IS)
          NS=0
        ENDIF
      ELSE
        NN=NN+1
        U(NN,IS) = ONE
        LABS(NN) = LABS(IS)
      ENDIF
    1 CONTINUE
      RETURN
      END
      SUBROUTINE TRI(NN,NR)
C
C     GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE BENDING
C     IN THE PLANE OF A TRIGONAL CENTRE
C
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*4 WORDS(2),LABS
      CHARACTER*1 LAB1
      INTEGER NR(9)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      DATA WORDS /'SCIS','ROCK'/
      DATA ONE,TWO,SIX /1.0D0,2.0D0,6.0D0/
      NN=NN+1
      U(NN,NR(1)) =  TWO/DSQRT(SIX)
      U(NN,NR(2)) = -ONE/DSQRT(SIX)
      U(NN,NR(3)) = -ONE/DSQRT(SIX)
      LABS(NN) = WORDS(1)
      NN=NN+1
      U(NN,NR(2)) =  ONE/DSQRT(TWO)
      U(NN,NR(3)) = -ONE/DSQRT(TWO)
      LABS(NN) = WORDS(2)
      RETURN
      END
      SUBROUTINE TET(NN,NR,IS)
      INCLUDE 'CAM_SIZE'
C
C     GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE BENDING
C     ABOUT A TETRAVALENT ATOM USING THE GENERALIZED
C     TREATMENT OF REDUNDANCY GIVEN BY
C     V. TYPKE, J. MOL. SPECTROSC. (1977) 64, 70-74.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION T(5,6),RI(3),RK(3),CPHI(6),SPHI(6)
      INTEGER NR(9)
      CHARACTER*4 WORDS(10),LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA WORDS/'SYM ','ASYM','WAG ','ROCK','TWST',
     *           'UMBR','SRCK','ARCK','SDEF','ADEF'/
      DATA ZERO,ONE/0.0D0,1.0D0/
      DO 1  M=1,6
      N=NR(M)
      I=INCO(1,N)
      J=INCO(2,N)
      K=INCO(3,N)
      DO 2  L=1,3
      RI(L) = X(L,I) - X(L,J)
    2 RK(L) = X(L,K) - X(L,J)
      RRI = DSQRT( RI(1)**2 + RI(2)**2 + RI(3)**2 )
      RRK = DSQRT( RK(1)**2 + RK(2)**2 + RK(3)**2 )
      CPHI(M) = ( RI(1)*RK(1) + RI(2)*RK(2) + RI(3)*RK(3) )
     *          / (RRI*RRK)
      SPHI(M) = DSQRT( ONE - CPHI(M)**2 )
    1 CONTINUE
      CLAM1 = ( CPHI(4) - CPHI(1)*CPHI(2) )/( SPHI(1)*SPHI(2) )
      SLAM1 = DSQRT( ONE - CLAM1**2 )
      CLAM2 = ( CPHI(5) - CPHI(1)*CPHI(3) )/( SPHI(1)*SPHI(3) )
      SLAM2 = DSQRT( ONE - CLAM2**2 )
      CLAM3 = ( CPHI(1) - CPHI(2)*CPHI(4) )/( SPHI(2)*SPHI(4) )
      SLAM3 = DSQRT( ONE - CLAM3**2 )
      CLAM4 = ( CPHI(5) - CPHI(4)*CPHI(6) )/( SPHI(4)*SPHI(6) )
      SLAM4 = DSQRT( ONE - CLAM4**2 )
      CLAM5 = ( CPHI(1) - CPHI(3)*CPHI(5) )/( SPHI(3)*SPHI(5) )
      CLAM6 = ( CPHI(4) - CPHI(5)*CPHI(6) )/( SPHI(5)*SPHI(6) )
C
C     EACH "SYMMETRY" COORDINATE IS ORTHOGONAL WITH RESPECT TO
C     THE REDUNDANCY CONDITION, WHICH IS :
C        R1*DELTA(PHI(1)) + R2*DELTA(PHI(2)) + R3*DELTA(PHI(3))
C      + R4*DELTA(PHI(4)) + R5*DELTA(PHI(5)) + R6*DELTA(PHI(6))
C            = 0
C
      R1 = SLAM4*(SLAM1*CLAM2 + CLAM1*SLAM2)
      R2 = -SLAM2*SLAM4
      R3 = -SLAM1*SLAM4
      R4 = SLAM2*(SLAM3*CLAM4 + CLAM3*SLAM4)
      R5 = SLAM2*SLAM3*CLAM6  + SLAM1*SLAM4*CLAM5
      R6 = -SLAM2*SLAM3
      DO 3  I=1,6
      DO 3  J=1,5
    3 T(J,I)=ZERO
      IF(IS.EQ.3) GO TO 4
C
C     TET2 : SYMMETRY COORDINATES FOR A METHYLENE-LIKE CENTRE X2CY2
C
      RRRR = (R2**2 + R3**2 + R4**2 + R5**2)/(R1**2 + R6**2)
C
C     SYMMETRIC DEFORMATION OF X-C-X AND Y-C-Y
C
      LABS(NN+1)=WORDS(1)
      T(1,1)=R1*RRRR
      T(1,2)= -R2
      T(1,3)= -R3
      T(1,4)= -R4
      T(1,5)= -R5
      T(1,6)=R6*RRRR
C
C     ASYMMETRIC DEFORMATION
C
      LABS(NN+2)=WORDS(2)
      T(2,1)= R6
      T(2,6)= -R1
C
C     WAGGING
C
      LABS(NN+3)=WORDS(3)
      T(3,2)= R4
      T(3,3)= R5
      T(3,4)= -R2
      T(3,5)= -R3
C
C     ROCKING
C
      LABS(NN+4)=WORDS(4)
      T(4,2)= R5
      T(4,3)= -R4
      T(4,4)= R3
      T(4,5)= -R2
C
C     TWISTING
C
      LABS(NN+5)=WORDS(5)
      T(5,2)= R3
      T(5,3)= -R2
      T(5,4)= -R5
      T(5,5)= R4
      GO TO 5
C
C     TET3 : SYMMETRY COORDINATES FOR A METHYL-LIKE CENTRE XCY3
C
C
C     UMBRELLA DEFORMATION
C
    4 FAC = (R4**2 + R5**2 + R6**2)/(R1**2 + R2**2 + R3**2)
      LABS(NN+1)=WORDS(6)
      T(1,1)= R1*FAC
      T(1,2)= R2*FAC
      T(1,3)= R3*FAC
      T(1,4)= -R4
      T(1,5)= -R5
      T(1,6)= -R6
C
C     SYMMETRIC ROCKING
C
      LABS(NN+2)=WORDS(7)
      T(2,1)= R2**2 + R3**2
      T(2,2)= -R1*R2
      T(2,3)= -R1*R3
C
C     ASYMMETRIC ROCKING
C
      LABS(NN+3)=WORDS(8)
      T(3,2)= R3
      T(3,3)= -R2
C
C     SYMMETRIC DEFORMATION
C
      LABS(NN+4)=WORDS(9)
      T(4,4)= -R4*R6
      T(4,5)= -R5*R6
      T(4,6)= R4**2 + R5**2
C
C     ASYMMETRIC DEFORMATION
C
      LABS(NN+5)=WORDS(10)
      T(5,4)= R5
      T(5,5)= -R4
    5 CONTINUE
C
C     NORMALIZE THE "SYMMETRY" COORDINATES
C
      DO 8  I=1,5
      TMAG=ZERO
      DO 6  J=1,6
    6 TMAG = TMAG + T(I,J)**2
      TMAG = DSQRT(TMAG)
      DO 7  J=1,6
    7 T(I,J) = T(I,J)/TMAG
    8 CONTINUE
      DO 9  J=1,6
      NRJ=NR(J)
      DO 9  K=1,5
    9 U(NN+K,NRJ)=T(K,J)
      NN=NN+5
      RETURN
      END
      SUBROUTINE TBPSYM(NN,NR)
      INCLUDE 'CAM_SIZE'
C
C     GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE BENDING
C     ABOUT A TRIGONAL BIPYRAMIDAL CENTRE HAVING A SYMMETRY
C     PLANE CONTAINING THE EQUATORIAL ATOMS :
C        E.G.       A --- C(E)3 ---A
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION T(9,9),RI(3),RK(3),CPHI(3),SPHI(3)
      INTEGER NR(9)
      CHARACTER*4 WORDS(7),LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/
      DATA WORDS/'SYMM','ASYM','UMBR','SCIS','TILT','TWST','ROCK'/
      DO 1  M=1,3
      N=M
      IF(M.EQ.3) N=8
      I=INCO(1,NR(N))
      J=INCO(2,NR(N))
      K=INCO(3,NR(N))
      DO 2  L=1,3
      RI(L)=X(L,I)-X(L,J)
    2 RK(L)=X(L,K)-X(L,J)
      RRI=DSQRT( RI(1)**2 + RI(2)**2 + RI(3)**2 )
      RRK=DSQRT( RK(1)**2 + RK(2)**2 + RK(3)**2 )
      CPHI(M)=( RI(1)*RK(1) + RI(2)*RK(2) + RI(3)*RK(3) )
     *         / (RRI*RRK)
      SPHI(M)=DSQRT(ONE-CPHI(M)**2)
    1 CONTINUE
      DO 3  I=1,9
      DO 3  J=1,9
    3 T(J,I)=ZERO
C
C     SYMMETRIC A-C-A DEFORMATION
C
      A1 = SPHI(2)
      A2 = SPHI(1)*CPHI(3)
      LABS(NN+1)=WORDS(1)
      T(1,1)= A1
      T(1,2)= A2
      T(1,3)= A2
      T(1,4)= A1
      T(1,5)= A2
      T(1,6)= A2
C
C     ASYMMETRIC A-C-A DEFORMATION
C
      LABS(NN+2)=WORDS(2)
      T(2,2)=ONE
      T(2,3)=-ONE
      T(2,5)=ONE
      T(2,6)=-ONE
C
C     UMBRELLA DEFORMATION OF -C(E)3-
C
      LABS(NN+3)=WORDS(3)
      T(3,1)=ONE
      T(3,2)=ONE
      T(3,3)=ONE
      T(3,4)=-ONE
      T(3,5)=-ONE
      T(3,6)=-ONE
C
C     SCISSOR DEFORMATION IN C(E)3 PLANE
C
      LABS(NN+4)=WORDS(4)
      T(4,7)=TWO
      T(4,8)= -ONE
      T(4,9)= -ONE
C
C     TILT DEFORMATION
C
      LABS(NN+5)=WORDS(5)
      T(5,1)=-TWO
      T(5,2)=ONE
      T(5,3)=ONE
      T(5,4)=TWO
      T(5,5)=-ONE
      T(5,6)=-ONE
C
C     TWIST
C
      LABS(NN+6)=WORDS(6)
      T(6,2)=ONE
      T(6,3)=-ONE
      T(6,5)=-ONE
      T(6,6)=ONE
C
C     ROCKING IN C(E)3 PLANE
C
      LABS(NN+7)=WORDS(7)
      T(7,8)=ONE
      T(7,9)=-ONE
C
C     REDUNDANCY CONDITIONS
C
      T(8,1) = -TWO*A2
      T(8,2) = A1
      T(8,3) = A1
      T(8,4) = -TWO*A2
      T(8,5) = A1
      T(8,6) = A1
      T(9,7) = ONE
      T(9,8) = ONE
      T(9,9) = ONE
C
C     NORMALIZE THE "SYMMETRY" COORDINATES
C
      DO 6  I=1,9
      TMAG=ZERO
      DO 4  J=1,9
    4 TMAG=TMAG+T(I,J)**2
      TMAG=DSQRT(TMAG)
      DO 5  J=1,9
    5 T(I,J)=T(I,J)/TMAG
    6 CONTINUE
      DO 7  J=1,9
      NRJ=NR(J)
      DO 7  K=1,9
    7 U(NN+K,NRJ)=T(K,J)
      NN=NN+7
      RETURN
      END
      SUBROUTINE TBPGEN(NN,NR)
      INCLUDE 'CAM_SIZE'
C
C     GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE BENDING
C     ABOUT A TRIGONAL BIPYRAMIDAL CENTRE NOT HAVING A SYMMETRY
C     PLANE CONTAINING THE EQUATORIAL ATOMS :
C        E.G.       A' --- C(E)3 ---A
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION T(9,9),RI(3),RK(3),CPHI(9),SPHI(9)
      INTEGER NR(9)
      CHARACTER*4 WORDS(7),LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/
      DATA WORDS/'x-TR','y-TR','UMBR','SCIS','y-RO','x-RO','ROCK'/
      DO 1  M=1,9
      N=NR(M)
      I=INCO(1,N)
      J=INCO(2,N)
      K=INCO(3,N)
      DO 2  L=1,3
      RI(L)=X(L,I)-X(L,J)
    2 RK(L)=X(L,K)-X(L,J)
      RRI=DSQRT( RI(1)**2 + RI(2)**2 + RI(3)**2 )
      RRK=DSQRT( RK(1)**2 + RK(2)**2 + RK(3)**2 )
      CPHI(M)=( RI(1)*RK(1) + RI(2)*RK(2) + RI(3)*RK(3) )
     *         / (RRI*RRK)
      SPHI(M)=DSQRT(ONE-CPHI(M)**2)
    1 CONTINUE
      CLAM1L = ( CPHI(8) - CPHI(1)*CPHI(2) )/( SPHI(1)*SPHI(2) )
      CLAM2L = ( CPHI(9) - CPHI(1)*CPHI(3) )/( SPHI(1)*SPHI(3) )
      CLAM3L = ( CPHI(1) - CPHI(2)*CPHI(8) )/( SPHI(2)*SPHI(8) )
      CLAM4L = ( CPHI(9) - CPHI(8)*CPHI(7) )/( SPHI(8)*SPHI(7) )
      CLAM5L = ( CPHI(1) - CPHI(3)*CPHI(9) )/( SPHI(3)*SPHI(9) )
      CLAM6L = ( CPHI(8) - CPHI(9)*CPHI(7) )/( SPHI(9)*SPHI(7) )
      SLAM1L = DSQRT( ONE - CLAM1**2 )
      SLAM2L = DSQRT( ONE - CLAM2**2 )
      SLAM3L = DSQRT( ONE - CLAM3**2 )
      SLAM4L = DSQRT( ONE - CLAM4**2 )
C
      CLAM1R = ( CPHI(8) - CPHI(4)*CPHI(5) )/( SPHI(4)*SPHI(5) )
      CLAM2R = ( CPHI(9) - CPHI(4)*CPHI(6) )/( SPHI(4)*SPHI(6) )
      CLAM3R = ( CPHI(4) - CPHI(5)*CPHI(8) )/( SPHI(5)*SPHI(8) )
      CLAM4R = ( CPHI(9) - CPHI(8)*CPHI(7) )/( SPHI(8)*SPHI(7) )
      CLAM5R = ( CPHI(4) - CPHI(6)*CPHI(9) )/( SPHI(6)*SPHI(9) )
      CLAM6R = ( CPHI(8) - CPHI(9)*CPHI(7) )/( SPHI(9)*SPHI(7) )
      SLAM1R = DSQRT( ONE - CLAM1**2 )
      SLAM2R = DSQRT( ONE - CLAM2**2 )
      SLAM3R = DSQRT( ONE - CLAM3**2 )
      SLAM4R = DSQRT( ONE - CLAM4**2 )
C
      R1L = SLAM4L*(SLAM1L*CLAM2L + CLAM1L*SLAM2L)
      R2L = -SLAM2L*SLAM4L
      R3L = -SLAM1L*SLAM4L
      R4L = SLAM2L*(SLAM3L*CLAM4L + CLAM3L*SLAM4L)
      R5L = SLAM2L*SLAM3L*CLAM6L  + SLAM1L*SLAM4L*CLAM5L
      R6L = -SLAM2L*SLAM3L
C
      R1R = SLAM4R*(SLAM1R*CLAM2R + CLAM1R*SLAM2R)
      R2R = -SLAM2R*SLAM4R
      R3R = -SLAM1R*SLAM4R
      R4R = SLAM2R*(SLAM3R*CLAM4R + CLAM3R*SLAM4R)
      R5R = SLAM2R*SLAM3R*CLAM6R  + SLAM1R*SLAM4R*CLAM5R
      R6R = -SLAM2R*SLAM3R
      WRITE(6,200) CLAM1L,CLAM2L,CLAM3L,CLAM4L,CLAM5L,CLAM6L,
     *             CLAM1R,CLAM2R,CLAM3R,CLAM4R,CLAM5R,CLAM6R,
     *             R1L,R2L,R3L,R4L,R5L,R6L,
     *             R1R,R2R,R3R,R4R,R5R,R6R
  200 FORMAT(/1X,6F12.6)
      DO 3  I=1,9
      DO 3  J=1,9
    3 T(J,I)=ZERO
C
C     SYMMETRIC A-C-A DEFORMATION
C
      LABS(NN+1)=WORDS(1)
      T(1,1)= R2L**2 + R3L**2
      T(1,2)= -R1L*R2L
      T(1,3)= -R1L*R3L
      T(1,4)= R2R**2 + R3R**2
      T(1,5)= -R1R*R2R 
      T(1,6)= -R1R*R3R 
C
C     ASYMMETRIC A-C-A DEFORMATION
C
      LABS(NN+2)=WORDS(2)
      T(2,2)= -R3L
      T(2,3)= R2L
      T(2,5)= -R3R
      T(2,6)= R2R
C
C     UMBRELLA DEFORMATION OF -C(E)3-
C
      LABS(NN+3)=WORDS(3)
      FACL = (R4L**2 + R5L**2 + R6L**2)/(R1L**2 + R2L**2 + R3L**2)
      FACR = (R4R**2 + R5R**2 + R6R**2)/(R1R**2 + R2R**2 + R3R**2)
      T(3,1)= -R1L*FACL 
      T(3,2)= -R2L*FACL 
      T(3,3)= -R3L*FACL 
      T(3,4)=  R1R*FACR 
      T(3,5)=  R2R*FACR 
      T(3,6)=  R3R*FACR
      T(3,7)=  R6L + R6R
      T(3,8)= -R4L + R4R
      T(3,9)= -R5L + R5R
C
C     SCISSOR DEFORMATION IN C(E)3 PLANE
C
      LABS(NN+4)=WORDS(4)
      T(4,7)= R4L**2 + R5L**2 + R4R**2 + R5R**2
      T(4,8)= -R4L*R6L -R4R*R6R 
      T(4,9)= -R5L*R6L -R5R*R6R 
C
C     TILT DEFORMATION
C
      LABS(NN+5)=WORDS(5)
      T(5,1)= -R2L**2 - R3L**2
      T(5,2)=  R1L*R2L
      T(5,3)=  R1L*R3L
      T(5,4)=  R2R**2 + R3R**2
      T(5,5)= -R1R*R2R
      T(5,6)= -R1R*R3R
C
C     TWIST
C
      LABS(NN+6)=WORDS(6)
      T(6,2)= -R3L
      T(6,3)= R2L
      T(6,5)= R3R 
      T(6,6)= -R2R
C
C     ROCKING IN C(E)3 PLANE
C
      LABS(NN+7)=WORDS(7)
      T(7,8)= -R5L - R5R
      T(7,9)=  R4L + R4R
C
C     REDUNDANCY CONDITIONS
C
      T(8,1) = R1L 
      T(8,2) = R2L 
      T(8,3) = R3L 
      T(8,8) = R4L 
      T(8,9) = R5L 
      T(8,7) = R6L 
      T(9,4) = R1R
      T(9,5) = R2R
      T(9,6) = R3R 
      T(9,8) = R4R
      T(9,9) = R5R
      T(9,7) = R6R
C
C     NORMALIZE THE "SYMMETRY" COORDINATES
C
      DO 6  I=1,9
      TMAG=ZERO
      DO 4  J=1,9
    4 TMAG=TMAG+T(I,J)**2
      TMAG=DSQRT(TMAG)
      DO 5  J=1,9
    5 T(I,J)=T(I,J)/TMAG
    6 CONTINUE
      
      DO 7  J=1,9
      NRJ=NR(J)
      DO 7  K=1,9
    7 U(NN+K,NRJ)=T(K,J)
      NN=NN+7
      RETURN
      END
      SUBROUTINE SN2METR(NN,NR,IS)
      INCLUDE 'CAM_SIZE'
C
C     GENERATION OF "SYMMETRY" COORDINATES FOR ANGLE BENDING
C     ABOUT A PENTAVALENT ATOM USING THE GENERALIZED
C     TREATMENT OF REDUNDANCY GIVEN BY
C     V. TYPKE, J. MOL. SPECTROSC. (1977) 64, 70-74.
C     FOR A 3-FOLD SYMMETRIC METHYL GROUP TOGETHER WITH
C     AN EXTRA ATOM, FORMING A DISTORTED TRIGONAL BIPYRAMID
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION T(7,8),RI(3),RK(3),CPHI(6),SPHI(6)
      INTEGER NR(9)
      CHARACTER*4 WORDS(7),LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DATA WORDS/'UMBR','X-TR','Y-TR','X-RO','Y-RO','SCIS','ROCK'/
      DATA ZERO,ONE/0.0D0,1.0D0/
      DO 1  M=1,6
      N=NR(M)
      I=INCO(1,N)
      J=INCO(2,N)
      K=INCO(3,N)
      DO 2  L=1,3
      RI(L) = X(L,I) - X(L,J)
    2 RK(L) = X(L,K) - X(L,J)
      RRI = DSQRT( RI(1)**2 + RI(2)**2 + RI(3)**2 )
      RRK = DSQRT( RK(1)**2 + RK(2)**2 + RK(3)**2 )
      CPHI(M) = ( RI(1)*RK(1) + RI(2)*RK(2) + RI(3)*RK(3) )
     *          / (RRI*RRK)
      SPHI(M) = DSQRT( ONE - CPHI(M)**2 )
    1 CONTINUE
      CLAM1 = ( CPHI(4) - CPHI(1)*CPHI(2) )/( SPHI(1)*SPHI(2) )
      SLAM1 = DSQRT( ONE - CLAM1**2 )
      CLAM2 = ( CPHI(5) - CPHI(1)*CPHI(3) )/( SPHI(1)*SPHI(3) )
      SLAM2 = DSQRT( ONE - CLAM2**2 )
      CLAM3 = ( CPHI(1) - CPHI(2)*CPHI(4) )/( SPHI(2)*SPHI(4) )
      SLAM3 = DSQRT( ONE - CLAM3**2 )
      CLAM4 = ( CPHI(5) - CPHI(4)*CPHI(6) )/( SPHI(4)*SPHI(6) )
      SLAM4 = DSQRT( ONE - CLAM4**2 )
      CLAM5 = ( CPHI(1) - CPHI(3)*CPHI(5) )/( SPHI(3)*SPHI(5) )
      CLAM6 = ( CPHI(4) - CPHI(5)*CPHI(6) )/( SPHI(5)*SPHI(6) )
C
C     EACH "SYMMETRY" COORDINATE IS ORTHOGONAL WITH RESPECT TO
C     THE REDUNDANCY CONDITION, WHICH IS :
C        R1*DELTA(PHI(1)) + R2*DELTA(PHI(2)) + R3*DELTA(PHI(3))
C      + R4*DELTA(PHI(4)) + R5*DELTA(PHI(5)) + R6*DELTA(PHI(6))
C            = 0
C
      R1 = SLAM4*(SLAM1*CLAM2 + CLAM1*SLAM2)
      R2 = -SLAM2*SLAM4
      R3 = -SLAM1*SLAM4
      R4 = SLAM2*(SLAM3*CLAM4 + CLAM3*SLAM4)
      R5 = SLAM2*SLAM3*CLAM6  + SLAM1*SLAM4*CLAM5
      R6 = -SLAM2*SLAM3
      DO 3  I=1,8
      DO 3  J=1,7
    3 T(J,I)=ZERO
C
C     TET3 : SYMMETRY COORDINATES FOR A METHYL-LIKE CENTRE XCH3
C
C
C     UMBRELLA DEFORMATION
C
      FAC = (R4**2 + R5**2 + R6**2)/(R1**2 + R2**2 + R3**2)
      LABS(NN+1)=WORDS(1)
      T(1,1)= R1*FAC
      T(1,2)= R2*FAC
      T(1,3)= R3*FAC
      T(1,4)= -R4
      T(1,5)= -R5
      T(1,6)= -R6
C
C     TRANSVERSE DISPLACEMENT OF METHYL IN PLANE OF A CH BOND "x" 
C
      LABS(NN+2)=WORDS(2)
      T(2,7)= ONE
C
C     TRANSVERSE DISPLACEMENT PERPENDICULAR TO PLANE OF A CH BOND "y"
C
      LABS(NN+3)=WORDS(3)
      T(3,8)= ONE
C
C     ROTATION OF METHYL ABOUT "y" AXIS PERPENDICULAR TO PLANE OF A CH BOND
C
      LABS(NN+4)=WORDS(4)
      T(4,1)= R2**2 + R3**2
      T(4,2)= -R1*R2
      T(4,3)= -R1*R3
C
C     ROTATION OF METHYL ABOUT "x" AXIS IN PLANE OF A CH BOND
C
      LABS(NN+5)=WORDS(5)
      T(5,2)= R3
      T(5,3)= -R2
C
C     SCISSOR DEFORMATION OF METHYL
C
      LABS(NN+6)=WORDS(6)
      T(6,4)= -R4*R6
      T(6,5)= -R5*R6
      T(6,6)= R4**2 + R5**2
C
C     ROCKING DEFORMATION OF METHYL
C
      LABS(NN+7)=WORDS(7)
      T(7,4)= R5
      T(7,5)= -R4
C
C     NORMALIZE THE "SYMMETRY" COORDINATES
C
      DO 8  I=1,7
      TMAG=ZERO
      DO 6  J=1,8
    6 TMAG = TMAG + T(I,J)**2
      TMAG = DSQRT(TMAG)
      DO 7  J=1,8
    7 T(I,J) = T(I,J)/TMAG
    8 CONTINUE
      DO 9  J=1,8
      NRJ=NR(J)
      DO 9  K=1,7
    9 U(NN+K,NRJ)=T(K,J)
      NN=NN+7
      RETURN
      END
      SUBROUTINE FCIN
C
C     INPUT CARTESIAN FORCE CONSTANTS AS PART OF THE REGULAR DATAFILE.
C     IF OPTION(32) is TRUE, "CAMISO/GRACE" FORMAT IS USED.
C
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL OPTION
      COMMON /BLOC1/ FC(MAXDIAG),E(MAXNC,MAXNC),FREQ(MAXNC)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      LHI= NC*(NC+1)/2
      IF(OPTION(32)) THEN 
        READ(IR,100) (FC(L),L=1,LHI)
        RETURN
      ELSEIF(OPTION(33)) THEN 
        READ(IR,102) (FC(L),L=1,LHI)
        RETURN
      ELSEIF(OPTION(27)) THEN
        READ(IR,103) (FC(L),L=1,LHI)
        RETURN
      ELSE
        READ(IR,101) (FC(L),L=1,LHI)
        RETURN
      ENDIF
  100 FORMAT(1X,3E20.12)
  101 FORMAT(6F12.8)
  102 FORMAT(6E16.8)
  103 FORMAT(3E20.14)
      END
      SUBROUTINE FINT
C
C     INPUT MOLECULAR FORCE FIELD IN AN INTERNAL-COORDINATE REPRESENTATION
C     (EITHER VALENCE FORCE CONSTANTS OR SYMMETRY FORCE CONSTANTS).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'CAM_SIZE'
      DOUBLE PRECISION FB(MAXNINT,MAXNC)
      LOGICAL OPTION
      CHARACTER*4 LABS
      CHARACTER*1 LAB1
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /BLOC1/ FC(MAXDIAG),E(MAXNC*MAXNC),FREQ(MAXNC)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      DATA ZERO,CON/0.0D0,15.569229D0/
      NFI=(NC*NC - 11*NC + 30)/2
      READ(11,101) (E(K),K=1,NFI)
      K=0
      DO 1  J=1,NINT
      DO 1  I=1,J
      K=K+1
      FI(I,J)=E(K)/CON
    1 FI(J,I)=FI(I,J)
      DO 2  I=1,NINT
      DO 2  J=1,NC
      FB(I,J)=ZERO
      DO 2  K=1,NINT
    2 FB(I,J)=FB(I,J) + FI(I,K)*UB(K,J)
      L = 0
      DO 3  J=1,NC
      DO 3  I=1,J
      L = L+1
      FC(L) = ZERO
      DO 3  K=1,NINT
    3 FC(L)=FC(L) + UB(K,I)*FB(K,J)
      IF(.NOT.OPTION(18)) RETURN
      WRITE(IW,201)
      CALL LINOUT(FC,NC,0)
      RETURN
  101 FORMAT(6F12.6)
  201 FORMAT(//' INTERNAL FORCE CONSTANTS INPUT...'//
     * ' GENERATED CARTESIAN FORCE CONSTANTS (HARTREE/BOHR**2)')
      END
      SUBROUTINE PROJEK
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION T(MAXNINT,MAXNC),TK(MAXNINT,MAXNC),
     *FB(MAXNINT,MAXNC),FU(MAXNINT,MAXNC)
      DOUBLE PRECISION AL(MAXDIAG),FCON(MAXNC,MAXNC)
C     REAL T0,DELTA
      CHARACTER*4 TEXT(7),LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      LOGICAL OPTION,NOSCALE
      COMMON /BLOC1/ FC(MAXDIAG),EIVR(MAXNC,MAXNC),Q(MAXNC)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /BLOC3/ FIA(MAXNI,MAXNI)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
C     EQUIVALENCE (EIVR(1,1),T(1,1),FB(1,1))
C     EQUIVALENCE (FIA(1,1),FCON(1,1))
      EQUIVALENCE (FC(1),AL(1))
      DATA ZERO,CON/0.0D0,15.569229D0/
      DATA TEXT/'VALE','NCE ','SYMM','ETRY','UNSC','  SC','ALED'/
      NOSCALE=.TRUE.
C
C     CONVERT CARTESIAN FORCE CONSTANTS TO MD/A, ETC.
C
      L=0
      DO 1  J=1,NC
      DO 1  I=1,J
      L=L+1
      FCON(I,J)=FC(L)*CON
    1 FCON(J,I)=FCON(I,J)
      LHI=L
C
C     COMPUTE GENERALISED INVERSE T OF THE RECTANGULAR MATRIX UB
C     ( NINT * NC ) SUCH THAT  UB * T  =  UNIT MATRIX (NINT*NINT)
C
C     FIRST, CONSTRUCT LINEAR ARRAY  AL = (UB) * (UB TRANSPOSE)
C
      DO 2  J = 1,NINT
      LOW = (J-1)*NINT
      DO 2  I = 1,J
      L = LOW + I
      AL(L) = ZERO
      DO 2  K = 1,NC
      AL(L) = AL(L) + UB(I,K)*UB(J,K)
    2 AL(J+(I-1)*NINT) = AL(L)
C
C     NEXT, INVERT AL
C
C     T0 = SECNDS(0.0)
      CALL LINV(NINT)
C     DELTA = SECNDS(T0)
C     WRITE(IW,2012) DELTA
C
C     AL NOW CONTAINS THE INVERSE MATRIX, WHICH IS MULTIPLIED BY UB
C
C     ( T TRANSPOSE )  =  ( AL ) * ( UB )
C
      DO 3   I=1,NINT
      DO 3   J=1,NC
      T(I,J)=ZERO
      DO 3   K=1,NINT
    3 T(I,J)=T(I,J) + AL((I-1)*NINT+K)*UB(K,J)
C
C     COMPUTE INTERNAL FORCE CONSTANTS FI FROM CARTESIAN FORCE
C     CONSTANTS FCON.
C     IF UB = B, THEN FI ARE NON-REDUNDANT VALENCE FORCE CONSTANTS;
C     IF UB = U * B, THEN FI ARE "SYMMETRY" FORCE CONSTANTS.
C
C     FI  =  ( T TRANSPOSE )  *  FC  *  T
C
      DO 4   I=1,NINT
      DO 4   J=1,NC
      TK(I,J)=ZERO
      DO 4   K=1,NC
    4 TK(I,J)=TK(I,J) + T(I,K)*FCON(K,J)
      DO 5   I=1,NINT
      DO 5   J=1,NINT
      FI(I,J)=ZERO
      DO 5   K=1,NC
    5 FI(I,J)=FI(I,J) + TK(I,K)*T(J,K)
      IF(OPTION(10).OR.OPTION(19).OR.OPTION(21).OR.OPTION(22).OR.
     *   OPTION(23)) NOSCALE=.FALSE.
C
C     PRINT OUT INTERNAL FORCE CONSTANTS AND WRITE TO CHANNEL 12,
C     IF REQUIRED
C
      IF(OPTION(18).OR.(OPTION(9).AND.NOSCALE.AND..NOT.OPTION(20)))THEN
        LL=5
        KK=1
        IF(OPTION(8)) KK=3
        WRITE(IW,2002) TEXT(LL),TEXT(7), TEXT(KK),TEXT(KK+1)
        CALL LAYOUT(FI,MAXNINT,MAXNINT,NINT,NINT)
      ENDIF
      IF(OPTION(6))  WRITE(12,2006) ((FI(I,J),I=1,J),J=1,NINT)
      IF(OPTION(5).AND..NOT.OPTION(20))
     * WRITE(12,2006)  ((FI(I,J),I=1,J),J=1,NINT)
C
C     FI  ARE NON-REDUNDANT SYMMETRY OR VALENCE FORCE CONSTANTS
C
      IF(OPTION(10)) THEN
C
C     SCALE ALL  FI  BY A SINGLE SCALING FACTOR
C
C     OPTION(10) = SCAL
C
        SCALF=SF(1)
        DO 7  I=1,NINT
        DO 7  J=1,NINT
    7   FI(J,I) = FI(J,I) * SCALF
        WRITE(IW,2007) SCALF
        IF(OPTION(18).OR.(OPTION(9).AND..NOT.OPTION(20)))THEN
          WRITE(IW,2004) TEXT(KK),TEXT(KK+1)
          CALL LAYOUT(FI,MAXNINT,MAXNINT,NINT,NINT)
        ENDIF
      ENDIF
      LL=6
      IF(OPTION(20)) GO TO 20
      IF(OPTION(7)) THEN
C
C     OPTION(7) = VALE
C
C     SCALE NON-REDUNDANT VALENCE FORCE CONSTANTS
C
        IF(OPTION(21)) THEN
C
C     OPTION(21) = SCVA
C
          DO 9  I=1,NINT
          DO 9  J=1,NINT
    9     FI(J,I) = FI(J,I) * DSQRT( SF(J)*SF(I) )
          WRITE(IW,2008)
        ELSEIF(OPTION(19)) THEN
C
C     OPTION(19) = SCVD
C
          DO 11  I=1,NINT
   11     FI(I,I) = FI(I,I) * SF(I)
          WRITE(IW,2009)
        ENDIF
        IF(OPTION(9).AND.(OPTION(19).OR.OPTION(21)))THEN
          WRITE(IW,2004) TEXT(KK),TEXT(KK+1)
          CALL LAYOUT(FI,MAXNINT,MAXNINT,NINT,NINT)
        ENDIF
      ENDIF
C
C     SCALE SYMMETRY COORDINATES
C
      IF(OPTION(23)) THEN
C
C     OPTION(23) = SCSA
C
        DO 32  I=1,NINT
        DO 32  J=1,NINT
   32   FI(J,I) = FI(J,I) * DSQRT( SF(J)*SF(I) )
        WRITE(IW,2010)
      ELSEIF(OPTION(22)) THEN
C
C     OPTION(22) = SCSD
C
        DO 34  I=1,NINT
   34   FI(I,I) = FI(I,I) * SF(I)
        WRITE(IW,2011)
      ENDIF
      IF(OPTION(9).AND.(OPTION(22).OR.OPTION(23))) THEN
        WRITE(IW,2004) TEXT(3),TEXT(4)
        CALL LAYOUT(FI,MAXNINT,MAXNINT,NINT,NINT)
      ENDIF
C
C     RECOMPUTE FORCE CONSTANT MATRIX (FC) IN CARTESIAN COORDINATES BY
C         (FC) = (UB TRANSPOSE) TIMES (FI) TIMES (UB)
C
      DO 14   I=1,NINT
      DO 14   J=1,NC
      FB(I,J)=ZERO
      DO 14   K=1,NINT
   14 FB(I,J)=FB(I,J) + FI(I,K)*UB(K,J)/CON
      L = 0
      DO 15   J=1,NC
      DO 15   I=1,J
      L = L+1
      FC(L) = ZERO
      DO 15   K=1,NINT
   15 FC(L)=FC(L) + UB(K,I)*FB(K,J)
      IF(OPTION(18)) THEN
        WRITE(IW,2003)
        CALL LINOUT(FC,NC,0)
      ENDIF
      IF(OPTION(4).OR.OPTION(14))WRITE(12,2005)(FC(L),L=1,LHI)
      RETURN
C
C     OPTION(20) = REDU
C
C     COMPUTE REDUNDANT VALENCE FORCE CONSTANTS
C      FIA  =  (U TRANSPOSE) *  FI  *  U
C
   20 DO 21  I=1,NINT
      DO 21  J=1,NI
      FU(I,J)=ZERO
      DO 21  K=1,NINT
   21 FU(I,J) = FU(I,J) + FI(I,K)*U(K,J)
      DO 22  I=1,NI
      DO 22  J=1,NI
      FIA(I,J)=ZERO
      DO 22  K=1,NINT
   22 FIA(I,J) = FIA(I,J) + U(K,I)*FU(K,J)
      IF(NOSCALE) LL=5
      IF(OPTION(5)) WRITE(12,2006) ((FIA(I,J),I=1,J),J=1,NI)
      IF(OPTION(18).OR.
     *  (OPTION(9).AND..NOT.OPTION(19).AND..NOT.OPTION(21))) THEN
        WRITE(IW,2002) TEXT(LL),TEXT(7),TEXT(1),TEXT(2)
        CALL LAYOUT(FIA,MAXNI,MAXNI,NI,NI)
      ENDIF
      IF(OPTION(21)) THEN
C
C     OPTION(21) = SCVA
C
        DO 24  I=1,NI
        DO 24  J=1,NI
   24   FIA(J,I) = FIA(J,I) * DSQRT( SF(J)*SF(I) )
        WRITE(IW,2008)
      ELSEIF(OPTION(19)) THEN
C
C     OPTION(19) = SCVD
C
        DO 26  I=1,NI
   26   FIA(I,I) = FIA(I,I) * SF(I)
        WRITE(IW,2009)
      ENDIF
      IF(OPTION(9).AND.(OPTION(19).OR.OPTION(21)))THEN
        WRITE(IW,2002) TEXT(6),TEXT(7),TEXT(1),TEXT(2)
        CALL LAYOUT(FIA,MAXNI,MAXNI,NI,NI)
      ENDIF
C
C     RECOMPUTE CARTESIAN FORCE CONSTANTS BY
C       FC  =  (B TRANSPOSE)  *  FIA  *  B
C
      DO 29  I=1,NI
      DO 29  J=1,NC
      FB(I,J) =ZERO
      DO 29  K=1,NI
   29 FB(I,J) = FB(I,J) + FIA(I,K)*B(K,J)/CON
      L = 0
      DO 30  J=1,NC
      DO 30  I=1,J
      L = L+1
      FC(L) = ZERO
      DO 30  K=1,NI
   30 FC(L) = FC(L) + B(K,I)*FB(K,J)
      IF(OPTION(18)) THEN
        WRITE(IW,2003)
        CALL LINOUT(FC,NC,0)
      ENDIF
      IF(OPTION(4).OR.OPTION(14))WRITE(12,2005)(FC(L),L=1,LHI)
      RETURN
C
C
C
 2002 FORMAT(//1X,2A4,1X,2A4,' FORCE CONSTANTS (MD/A FOR STRETCHING, ',
     *'MD.A/RAD**2 FOR BENDING)')
 2003 FORMAT(//' PROJECTED CARTESIAN FORCE CONSTANTS (HARTREE/BOHR**2)
     *')
 2004 FORMAT(//' SCALED ',2A4,' FORCE CONSTANTS')
C 2005 FORMAT(6F12.8)
 2005 FORMAT(3E20.10)
 2006 FORMAT(6F12.6)
 2007 FORMAT(//' ALL FORCE CONSTANTS SCALED BY',F6.3)
 2008 FORMAT(//' ALL VALENCE FORCE CONSTANTS SCALED BY GEOMETRIC MEAN',
     *' OF PRIMARY SCALING FACTORS')
 2009 FORMAT(//' DIAGONAL VALENCE FORCE CONSTANTS SCALED BY PRIMARY',
     *' SCALING FACTORS')
 2010 FORMAT(//' ALL SYMMETRY FORCE CONSTANTS SCALED BY GEOMETRIC MEAN',
     * ' OF PRIMARY SCALING FACTORS')
 2011 FORMAT(//' DIAGONAL SYMMETRY FORCE CONSTANTS SCALED BY PRIMARY',
     * ' SCALING FACTORS')
C2012 FORMAT(/' TIME FOR MATRIX INVERSION = ',F6.2,' SECONDS')
      END
      SUBROUTINE LINV(N)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'CAM_SIZE'
      COMMON /BLOC1/ A(MAXDIAG),E(MAXNC,MAXNC),Q(MAXNC)
************************************************************************
*
*    LINV INVERTS A GENERAL SQUARE MATRIX
*
*   ON INPUT       A = GENERAL SQUARE MATRIX STORED LINEARLY.
*                  N = DIMENSION OF MATRIX A.
*                  D = VARIABLE, NOT DEFINED ON INPUT.
*
*   ON OUTPUT      A = INVERSE OF ORIGINAL A.
*                  D = DETERMINANT OF ORIGINAL A, UNLESS A WAS SINGULAR,
*                      IN WHICH CASE D = 0.0
*
************************************************************************
      INTEGER L(MAXNI), M(MAXNI)
************************************************************************
*
*    IF THE VALUE OF TOL GIVEN HERE IS UNSUITABLE, IT CAN BE CHANGED.
      TOL=1.D-10
*
*
************************************************************************
      D=1.0D0
      NK=-N
      DO 180 K=1,N
         NK=NK+N
         L(K)=K
         M(K)=K
         KK=NK+K
         BIGA=A(KK)
         DO 20 J=K,N
            IZ=N*(J-1)
            DO 20 I=K,N
               IJ=IZ+I
               IF (DABS(BIGA)-DABS(A(IJ))) 10,20,20
   10          BIGA=A(IJ)
               L(K)=I
               M(K)=J
   20    CONTINUE
         J=L(K)
         IF (J-K) 50,50,30
   30    KI=K-N
         DO 40 I=1,N
            KI=KI+N
            HOLO=-A(KI)
            JI=KI-K+J
            A(KI)=A(JI)
   40    A(JI)=HOLO
   50    I=M(K)
         IF (I-K) 80,80,60
   60    JP=N*(I-1)
         DO 70 J=1,N
            JK=NK+J
            JI=JP+J
            HOLO=-A(JK)
            A(JK)=A(JI)
   70    A(JI)=HOLO
   80    IF (DABS(BIGA)-TOL) 90,100,100
   90    D=0.0D0
         RETURN
  100    DO 120 I=1,N
            IF (I-K) 110,120,110
  110       IK=NK+I
            A(IK)=A(IK)/(-BIGA)
  120    CONTINUE
         DO 150 I=1,N
            IK=NK+I
            IJ=I-N
            DO 150 J=1,N
               IJ=IJ+N
               IF (I-K) 130,150,130
  130          IF (J-K) 140,150,140
  140          KJ=IJ-I+K
               A(IJ)=A(IK)*A(KJ)+A(IJ)
  150    CONTINUE
         KJ=K-N
         DO 170 J=1,N
            KJ=KJ+N
            IF (J-K) 160,170,160
  160       A(KJ)=A(KJ)/BIGA
  170    CONTINUE
         D=D*BIGA
         A(KK)=1.0D0/BIGA
  180 CONTINUE
      K=N
  190 K=K-1
      IF (K) 260,260,200
  200 I=L(K)
      IF (I-K) 230,230,210
  210 JQ=N*(K-1)
      JR=N*(I-1)
      DO 220 J=1,N
         JK=JQ+J
         HOLO=A(JK)
         JI=JR+J
         A(JK)=-A(JI)
  220 A(JI)=HOLO
  230 J=M(K)
      IF (J-K) 190,190,240
  240 KI=K-N
      DO 250 I=1,N
         KI=KI+N
         HOLO=A(KI)
         JI=KI+J-K
         A(KI)=-A(JI)
  250 A(JI)=HOLO
      GO TO 190
  260 RETURN
      END
      SUBROUTINE VIB
C
C     SOLVE THE VIBRATIONAL EIGENVALUE/EIGENVECTOR PROBLEM
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL OPTION
      INCLUDE 'CAM_SIZE'
      DOUBLE PRECISION XQ(MAXNC,MAXNC),RQ(MAXNI,MAXNI),
     *P(MAXNC,MAXNC),FQ(MAXNC),
     * G(MAXNC),EM(MAXNAT,3),EU(MAXNAT,3),AM(3),VM(3),XJ(3),EJ(3)
C     REAL T0,DELTA
      CHARACTER*4 LABS
      CHARACTER*2 LMNT
      CHARACTER*1 LAB1
      COMMON /BLOC1/ V(MAXDIAG),EIVR(MAXNC,MAXNC),FREQ(MAXNC)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
C     EQUIVALENCE (XQ(1,1),P(1,1),V(1)),(RQ(1,1),EIVR(1,1))
      DATA TFACT/2.6436411815482D07/,ZERO/0.0D0/,TM8/1.0D-08/
C
C     MASS-WEIGHT THE CARTESIAN FORCE CONSTANT MATRIX
C
      DO 1  I=1,NAT
      J=3*I-2
      G(J)=DSQRT(WT(I))
      G(J+1)=G(J)
    1 G(J+2)=G(J)
      L = 0
      DO 2  I=1,NC
      GI=G(I)
      FREQ(I)=ZERO
      DO 29  J=1,I
      L = L+1
   29 V(L) = V(L)/(GI*G(J))
      DO 2   K=1,NC
    2 EIVR(K,I)=ZERO
C
C     DIAGONALIZE THE MASS-WEIGHTED CARTESIAN FORCE CONSTANT MATRIX
C
C     T0 = SECNDS(0.0)
      IF(OPTION(11)) THEN
            CALL EIGEN(NC,NC)
      ELSE
            CALL EIGEN(NC,0)
      ENDIF
C     DELTA = SECNDS(T0)
C     WRITE(IW,211) DELTA
C
C     CONVERT EIGENVALUES TO FREQUENCIES IN UNITS OF CM-1
C
      DO 3  I=1,NC
      TEMP=FREQ(I)
      FQ(I)=TEMP
      FREQ(I)=DSQRT(DABS(TFACT*TEMP))
    3 FREQ(I)=DSIGN(FREQ(I),TEMP)
      IF( OPTION(11) )  GO TO 4
      WRITE(IW,201) (FREQ(I),I=1,NC)
	  WRITE(20,201) (FREQ(I),I=1,NC)
      GO TO 23
C
C     CALCULATE THE MASS-WEIGHTED AND UNWEIGHTED CARTESIAN COMPONENTS
C     AND THE LINEAR AND ANGULAR CONTRIBUTIONS TO EACH NORMAL
C     COORDINATE
C
    4 IF(.NOT.OPTION(18)) GO TO 5
      WRITE(IW,202)
    5 DO 10  I=1,NC
      DO 6  K=1,3
      VM(K)=ZERO
    6 AM(K)=ZERO
      UMAG=ZERO
      DO 8  J=1,NAT
      NU=3*(J-1)
      GJ=G(NU+1)
      DO 7  K=1,3
      EMJK=EIVR(NU+K,I)
      EM(J,K)=EMJK
      EUJK=EMJK/GJ
      EU(J,K)=EUJK
      UMAG=UMAG+EUJK*EUJK
      XJ(K)=X(K,J)
      EJ(K)=EMJK*GJ
    7 VM(K)=VM(K) + EJ(K)
      AM(1)=AM(1) + (XJ(2)*EJ(3) - XJ(3)*EJ(2))
      AM(2)=AM(2) + (XJ(3)*EJ(1) - XJ(1)*EJ(3))
    8 AM(3)=AM(3) + (XJ(1)*EJ(2) - XJ(2)*EJ(1))
      UMAG=DSQRT(UMAG)
      IF(UMAG.EQ.ZERO) UMAG = 1.0D0
      DO 9  J=1,NAT
      DO 9  K=1,3
      JK=3*(J-1) + K
      XQ(JK,I)=EU(J,K)
    9 EU(J,K)=EU(J,K)/UMAG
      IF(.NOT.OPTION(18)) GO TO 10
      WRITE(IW,203) FREQ(I),(N,(EM(N,L),L=1,3),(EU(N,L),L=1,3),N=1,NAT)
C	  WRITE(IW,200)
C      WRITE(IW,2009) (FREQ(I),I=1,NC)
  200 FORMAT(/'Frequencies of normal modes (cm-1)')
 2009 FORMAT(6F12.4)
C
C     THE COMPONENTS OF VM AND OF AM ARE PROPORTIONAL TO THE COMPONENTS
C     OF LINEAR MOMENTUM AND OF ANGULAR MOMENTUM RESPECTIVELY FOR ANY
C     EIGENVECTOR.   ALL SIX OF THESE COMPONENTS SHOULD BE EQUAL TO ZERO
C     IF THE EIGENVECTOR CORRESPONDS TO A GENUINE VIBRATIONAL MOTION.
C
      WRITE(IW,204) (VM(K),K=1,3),(AM(K),K=1,3)
   10 CONTINUE
      IF( .NOT. (OPTION(7) .OR. OPTION(31)))  RETURN
C
C     CALCULATE INTERNAL COORDINATE COMPONENTS OF NORMAL COORDINATES
C
      DO 11  IF=1,NC
      DO 11  IN=1,NINT
      RQ(IN,IF)=ZERO
      DO 11  IC=1,NC
   11 RQ(IN,IF)=RQ(IN,IF) + UB(IN,IC)*XQ(IC,IF)
      DO 12  I=1,NC
      DO 12  J=1,NC
   12 P(I,J)=ZERO
C
C     CALCULATE POTENTIAL ENERGY DISTRIBUTION FOR EACH NORMAL MODE
C
      DO 14  IF=1,NC
      IF(DABS(FQ(IF)).LT.TM8) GO TO 14
      DO 13  IN=1,NINT
   13 P(IN,IF)=RQ(IN,IF)*RQ(IN,IF)*FI(IN,IN)/(FQ(IF)*15.569229D0)
   14 CONTINUE
C
C     PRINT OUT EIGENVECTORS IN INTERNAL COORDINATES AND THEIR
C     POTENTIAL ENERGY DISTRIBUTIONS
C
      WRITE(IW,205)
      LOW=1
   15 LHI=LOW+5
      IF(LHI.GT.NC) LHI=NC
      WRITE(IW,206) (FREQ(IF),IF=LOW,LHI)
      IF((LHI-LOW).LT.5) GO TO 16
      WRITE(IW,207)
      GO TO 17
   16 WRITE(IW,208)
   17 IF(OPTION(8)) GO TO 19
      DO 18  IN=1,NI
   18 WRITE(IW,209) IN,LAB1(IN),LAB2(IN),(INCO(I,IN),I=1,4),
     *  (RQ(IN,IF),P(IN,IF),IF=LOW,LHI)
      GO TO 21
   19 DO 20  IN=1,NINT
   20 WRITE(IW,210) IN,LABS(IN),(RQ(IN,IF),P(IN,IF),IF=LOW,LHI)
   21 IF(LHI.EQ.NC) GO TO 22
      LOW=LHI+1
      GO TO 15
   22 CONTINUE
C
C     COMPARE CALCULATED AND OBSERVED FREQUENCIES
C
   23 IF(OPTION(24)) CALL COMPAR
      RETURN
  201 FORMAT(//' FREQUENCIES OF NORMAL MODES (CM-1)'//(10F12.4))
  202 FORMAT(//' FREQUENCIES (CM-1) AND CARTESIAN COORDINATES OF NORMAL
     *MODES'//' FREQUENCY',20X,'MASS-WEIGHTED CARTESIANS',20X,'UNWEIGHTE
     *D CARTESIANS'//13X,'ATOM',10X,'X',11X,'Y',11X,'Z',21X,'X',11X,'Y',
     * 11X,'Z'//)
  203 FORMAT(//1X,F10.4/(14X,I2,5X,3F12.6,10X,3F12.6))
  204 FORMAT(//47X,'LINEAR COMPONENTS',3X,3F12.6/46X,'ANGULAR',
     *' COMPONENTS',3X,3F12.6/)
  205 FORMAT(//' EIGENVECTORS IN INTERNAL COORDINATES AND POTENTIAL ENER
     *GY DISTRIBUTION')
  206 FORMAT(//6X,'FREQUENCY (CM-1) : ',6(1X,F8.2,9X))
  207 FORMAT(//25X,6('VECTOR',3X,'P.E.D.',3X)//)
  208 FORMAT(//25X,3('VECTOR',3X,'P.E.D.',3X)//)
  209 FORMAT(1X,I4,2X,A1,I2,1X,4I3,4X,6(F6.3,F8.2,4X))
  210 FORMAT(1X,I4,5X,A4,13X,6(F6.3,F8.2,4X))
C 211 FORMAT(/' TIME FOR MATRIX DIAGONALISATION = ',F6.2,' SECONDS'/)
      END
      SUBROUTINE EIGEN(N,M)
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /BLOC1/ A(MAXDIAG),V(MAXNC,MAXNC),E(MAXNC)
      DIMENSION W(5,MAXNI)
*************************************************************
*
* THIS IS THE DIAGONALISATION ROUTINE HQRII :
* Y. BEPPU & I. NINOMIYA, COMPUTERS & CHEMISTRY, 6 (1982) 87.
*
* ON INPUT    A       = MATRIX TO BE DIAGONALISED
*             N       = SIZE OF MATRIX TO BE DIAGONALISED.
*             M       = NUMBER OF EIGENVECTORS NEEDED.
*             E       = ARRAY OF SIZE AT LEAST N
*             V       = ARRAY OF SIZE AT LEAST NMAX*M
*
* ON OUTPUT   E       = EIGENVALUES
*             V       = EIGENVECTORS IN ARRAY OF SIZE NMAX*M
*
************************************************************************
C     IF(N.LE.1 .OR. M .LE.1 .OR. M .GT. N) THEN
C        IF(N.EQ.1 .AND. M.EQ.1) THEN
C           E(1)=A(1)
C           V(1,1)=1.D0
C           RETURN
C        ENDIF
C        WRITE(6,'(////10X,''IN HQRII, N ='',I4,'' M ='',I4)')N,M
C        STOP
C     ENDIF
*
* EPS3 AND EPS ARE MACHINE-PRECISION DEPENDENT
*
      EPS3=1.D-30
      ZERO=0.D0
      LL=(N*(N+1))/2+1
      EPS=1.D-8
      IORD=-1
      NM1=N-1
      IF(N.EQ.2) GOTO 80
      NM2=N-2
C     HOUSEHOLDER TRANSFORMATION
      DO 70 K=1,NM2
         KP1=K+1
         W(2,K)=A((K*(K+1))/2)
         SUM=0.
         DO 10 J=KP1,N
            W(2,J)=A((J*(J-1))/2+K)
   10    SUM=W(2,J)**2+SUM
         S=SIGN(SQRT(SUM),W(2,KP1))
         W(1,K)=-S
         W(2,KP1)=W(2,KP1)+S
         A(K+(KP1*(KP1-1))/2)=W(2,KP1)
         H=W(2,KP1)*S
         IF(ABS(H).LT.1.D-35) GOTO 70
C#      IF(H.EQ.0.D0) GOTO 70
         SUMM=0.D0
         DO 50 I=KP1,N
            SUM=0.D0
            DO 20 J=KP1,I
   20       SUM=SUM+A(J+(I*(I-1))/2)*W(2,J)
            IF(I.GE.N) GOTO 40
            IP1=I+1
            DO 30 J=IP1,N
   30       SUM=SUM+A(I+(J*(J-1))/2)*W(2,J)
   40       W(1,I)=SUM/H
   50    SUMM=W(1,I)*W(2,I)+SUMM
         U=SUMM*0.5D0/H
         DO 60 J=KP1,N
            W(1,J)=W(2,J)*U-W(1,J)
            DO 60 I=KP1,J
   60    A(I+(J*(J-1))/2)=W(1,I)*W(2,J)+W(1,J)*W(2,I)+A(I+(J*(J-1))/2)
   70 A((K*(K+1))/2)=H
   80 W(2,NM1)=A((NM1*(NM1+1))/2)
      W(2,N)=A((N*(N+1))/2)
      W(1,NM1)=A(NM1+(N*(N-1))/2)
      W(1,N)=0.D0
      GERSCH=ABS(W(2,1))+ABS(W(1,1))
      DO 90 I=1,NM1
   90 GERSCH=MAX(ABS(W(2,I+1))+ABS(W(1,I))+ABS(W(1,I+1)),GERSCH)
      DEL=EPS*GERSCH
      DO 100 I=1,N
         W(3,I)=W(1,I)
         E(I)=W(2,I)
  100 V(I,N)=E(I)
C 100 V(I,M)=E(I)
      IF(DEL.EQ.ZERO)  GOTO  210
C     QR-METHOD WITH ORIGIN SHIFT
      K=N
  110 L=K
  120 IF(ABS(W(3,L-1)).LT.DEL) GOTO 130
      L=L-1
      IF(L.GT.1)  GOTO 120
  130 IF(L.EQ.K)  GOTO 160
      WW=(E(K-1)+E(K))*0.5D0
      R=E(K)-WW
      Z=SIGN(SQRT(W(3,K-1)**2+R*R),R)+WW
      EE=E(L)-Z
      E(L)=EE
      FF=W(3,L)
      R=SQRT(EE*EE+FF*FF)
      J=L
      GOTO 150
  140 R=SQRT(E(J)**2+W(3,J)**2)
      W(3,J-1)=S*R
      EE=E(J)*C
      FF=W(3,J)*C
  150 C=E(J)/R
      S=W(3,J)/R
      WW=E(J+1)-Z
      E(J)=(FF*C+WW*S)*S+EE+Z
      E(J+1)=C*WW-S*FF
      J=J+1
      IF(J.LT.K) GOTO 140
      W(3,K-1)=E(K)*S
      E(K)=E(K)*C+Z
      GOTO 110
  160 K=K-1
      IF(K.GT.1) GOTO 110
*    *    *    *    *    *    *    *    *    *    *    *    *
*
*   AT THIS POINT THE ARRAY 'E' CONTAINS THE UN-ORDERED EIGENVALUES
*
*    *    *    *    *    *    *    *    *    *    *    *    *
C     STRAIGHT SELECTION SORT OF EIGENVALUES
      SORTER=1.D0
      IF(IORD.LT.0) SORTER=-1.D0
      J=N
  170 L=1
      II=1
      LL=1
      DO 190 I=2,J
         IF((E(I)-E(L))*SORTER .GT. 0.D0) GOTO 180
         L=I
         GOTO 190
  180    II=I
         LL=L
  190 CONTINUE
      IF(II.EQ.LL) GOTO 200
      WW=E(LL)
      E(LL)=E(II)
      E(II)=WW
  200 J=II-1
      IF(J.GE.2) GOTO 170
  210 IF(M.EQ.0) RETURN
***************
*  ORDERING OF EIGENVALUES COMPLETE.
***************
C      INVERSE-ITERATION FOR EIGENVECTORS
      FN=FLOAT(N)
      EPS1=1.D-5
      SEPS=SQRT(EPS)
      EPS2=0.05D0
      RN=0.D0
      RA=EPS*0.6180339887485D0
C    0.618... IS THE FIBONACCI NUMBER (-1+SQRT(5))/2.
      IG=1
      DO 430 I=1,M
         IM1=I-1
         DO 220 J=1,N
            W(3,J)=0.D0
            W(4,J)=W(1,J)
            W(5,J)=V(J,M)-E(I)
            RN=RN+RA
            IF(RN.GE.EPS) RN=RN-EPS
  220    V(J,I)=RN
         DO 250 J=1,NM1
            IF(ABS(W(5,J)).GE.ABS(W(1,J))) GOTO 230
            W(2,J)=-W(5,J)/W(1,J)
            W(5,J)=W(1,J)
            T=W(5,J+1)
            W(5,J+1)=W(4,J)
            W(4,J)=T
            W(3,J)=W(4,J+1)
            IF(W(3,J).EQ.ZERO) W(3,J)=DEL
            W(4,J+1)=0.D0
            GOTO 240
  230       IF(W(5,J).EQ.ZERO) W(5,J)=DEL
            W(2,J)=-W(1,J)/W(5,J)
  240       W(4,J+1)=W(3,J)*W(2,J)+W(4,J+1)
  250    W(5,J+1)=W(4,J)*W(2,J)+W(5,J+1)
         IF(ABS(W(5,N)) .LT. EPS3) W(5,N)=DEL
         DO 310 ITERE=1,5
            IF(ITERE.EQ.1) GOTO 270
            DO 260 J=1,NM1
               IF(W(3,J).EQ.ZERO) GOTO 260
               T=V(J,I)
               V(J,I)=V(J+1,I)
               V(J+1,I)=T
  260       V(J+1,I)=V(J,I)*W(2,J)+V(J+1,I)
  270       V(N,I)=V(N,I)/W(5,N)
            V(NM1,I)=(V(NM1,I)-V(N,I)*W(4,NM1))/W(5,NM1)
            VN=MAX(ABS(V(N,I)),ABS(V(NM1,I)),1.D-20)
            IF(N.EQ.2) GOTO 290
            K=NM2
  280       V(K,I)=(V(K,I)-V(K+1,I)*W(4,K)-V(K+2,I)*W(3,K))/W(5,K)
            VN=MAX(ABS(V(K,I)),VN,1.D-20)
            K=K-1
            IF(K.GE.1) GOTO 280
  290       S=EPS1/VN
            DO 300 J=1,N
  300       V(J,I)=V(J,I)*S
            IF(ITERE.GT.1 .AND. VN.GT.1) GOTO 320
  310    CONTINUE
C     TRANSFORMATION OF EIGENVECTORS
  320    IF(N.EQ.2) GOTO 360
         DO 350 J=1,NM2
            K=N-J-1
            IF(A((K*(K+1))/2).EQ.ZERO) GOTO 350
            KP1=K+1
            SUM=0.D0
            DO 330 KK=KP1,N
  330       SUM=SUM+A(K+(KK*(KK-1))/2)*V(KK,I)
            S=-SUM/A((K*(K+1))/2)
            DO 340 KK=KP1,N
  340       V(KK,I)=A(K+(KK*(KK-1))/2)*S+V(KK,I)
  350    CONTINUE
  360    DO 370 J=IG,I
            IF(ABS(E(J)-E(I)) .LT. EPS2) GOTO 380
  370    CONTINUE
         J=I
  380    IG=J
         IF(IG .EQ. I) GOTO 410
C     RE-ORTHOGONALISATION
         DO 400 K=IG,IM1
            SUM=0.D0
            DO 390 J=1,N
  390       SUM=V(J,K)*V(J,I)+SUM
            S=-SUM
            DO 400 J=1,N
  400    V(J,I)=V(J,K)*S+V(J,I)
C     NORMALISATION
  410    SUM=1.D-24
         DO 420 J=1,N
  420    SUM=SUM+V(J,I)**2
         SINV=1.D0/SQRT(SUM)
         DO 430 J=1,N
  430 V(J,I)=V(J,I)*SINV
      RETURN
      END
      SUBROUTINE RELAX
      INCLUDE 'CAM_SIZE'
C
C     ROUTINE TO INVERT FORCE CONSTANT MATRIX (INTERNAL OR SYMMETRY
C        COORDINATES) TO YIELD COMPLIANCE CONSTANTS, RELAXED FORCE
C        CONSTANTS AND INTERACTION DISPLACEMENT COORDINATES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION CU(MAXNINT,MAXNI)
C     REAL T0,DELTA
      CHARACTER*4 TEXT(4),LABS
      CHARACTER*1 LAB1
      LOGICAL OPTION
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      COMMON /BLOC1/ C(MAXDIAG),E(MAXNC,MAXNC),Z(MAXNC)
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),FI(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /BLOC3/ CR(MAXNI,MAXNI)
C     EQUIVALENCE (B(1,1),CU(1,1))
      DATA ZERO,ONE /0.0D0,1.0D0/
      DATA TEXT/'VALE','NCE ','SYMM','ETRY'/
C
C     INVERT THE LINEAR ARRAY OF INTERNAL FORCE CONSTANTS
C
      L = 0
      DO 1  J=1,NINT
      DO 1  I=1,NINT
      L = L+1
    1 C(L) = FI(I,J)
C     T0 = SECNDS(0.0)
      CALL LINV(NINT)
C     DELTA = SECNDS(T0)
C     WRITE(IW,205) DELTA
      KK=1
      IF(OPTION(8)) KK=3
      IF(OPTION(18)) THEN
        WRITE(IW,201) TEXT(KK),TEXT(KK+1)
        CALL LINOUT(C,NINT,1)
      ENDIF
      L=0
      DO 10  J=1,NINT
      PC = C(NINT*(J-1)+J)
      DO 9   I=1,NINT
      L = L+1
C
C     INTERACTION DISPLACEMENT COORDINATE = OFF-DIAGONAL COMPLIANCE
C       CONSTANT/DIAGONAL COMPLIANCE CONSTANT
C
    9 CR(I,J) = C(L)/PC
C
C     RELAXED FORCE CONSTANT = RECIPROCAL DIAGONAL COMPLIANCE CONSTANT
C
   10 CR(J,J) = ONE/PC
      IF(OPTION(18).OR.(.NOT.OPTION(20)))THEN
        WRITE(IW,204) TEXT(KK),TEXT(KK+1)
        CALL LAYOUT(CR,MAXNI,MAXNI,NINT,NINT)
      ENDIF
      IF(OPTION(20)) THEN
C
C     CONSTRUCT VALENCE COMPLIANCE CONSTANTS AS
C       CR  =  ( U TRANSPOSE ) * C * ( U )
C
        DO 6  I=1,NINT
        DO 6  J=1,NI
        CU(I,J)=ZERO
        DO 6  K=1,NINT
    6   CU(I,J)=CU(I,J) + C(NINT*(I-1)+K)*U(K,J)
        DO 7  I=1,NI
        DO 7  J=1,NI
        CR(I,J)=ZERO
        DO 7  K=1,NINT
    7   CR(I,J)=CR(I,J) + U(K,I)*CU(K,J)
        IF(OPTION(18)) THEN
          WRITE(IW,201) TEXT(1),TEXT(2)
          CALL LAYOUT(CR,MAXNI,MAXNI,NI,NI)
        ENDIF
        DO 13  J=1,NI
        PC = CR(J,J)
        DO 12  I=1,NI
C
C     INTERACTION DISPLACEMENT VALENCE COORDINATES
C
   12   CR(I,J) = CR(I,J)/PC
C
C     RELAXED VALENCE FORCE CONSTANTS
C
   13   CR(J,J) = ONE/PC
        WRITE(IW,204) TEXT(1),TEXT(2)
        CALL LAYOUT(CR,MAXNI,MAXNI,NI,NI)
      ENDIF
      RETURN
  201 FORMAT(//1X,2A4,' COMPLIANCE CONSTANTS (A/MD FOR STRETCHING, ',
     * 'RAD**2/MD.A FOR BENDING)')
  202 FORMAT(//' INVERSION OF POSITIVE DEFINITE FORCE CONSTANT',
     * ' MATRIX')
  203 FORMAT(//' INVERSION OF FORCE CONSTANT MATRIX FOR SADDLE',
     * ' POINT OR MAXIMUM')
  204 FORMAT(//' RELAXED PRIMARY ',2A4,' FORCE CONSTANTS (DIAGONAL ',
     * 'ELEMENTS) AND'/' INTERACTION DISPLACEMENT COORDINATES ',
     * '(OFF-DIAGONAL ELEMENTS)')
C 205 FORMAT(/' TIME FOR MATRIX INVERSION = ',F6.2,' SECONDS'/)
      END
      SUBROUTINE DC(I,J,E,R)
      INCLUDE 'CAM_SIZE'
C
C     CALCULATES DIRECTION COSINES AND MAGNITUDE OF BOND VECTOR I-J
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      DOUBLE PRECISION E(3)
      CHARACTER*2 LMNT
      DO 1  K=1,3
    1 E(K) = X(K,J) - X(K,I)
      R = DSQRT( E(1)*E(1) + E(2)*E(2) + E(3)*E(3) )
      DO 2  K=1,3
    2 E(K) = E(K)/R
      RETURN
      END
      SUBROUTINE CROSS(EI,EJ,EN,S)
C
C     CROSS CALCULATES THE VECTOR PRODUCT OF TWO UNIT VECTORS EI X EJ
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION EI(3),EJ(3),EN(3)
      EN(1) = EI(2)*EJ(3) - EI(3)*EJ(2)
      EN(2) = EI(3)*EJ(1) - EI(1)*EJ(3)
      EN(3) = EI(1)*EJ(2) - EI(2)*EJ(1)
      S = DSQRT( EN(1)*EN(1) + EN(2)*EN(2) + EN(3)*EN(3) )
C
C     S    IS THE SINE OF THE ANGLE BETWEEN THE TWO UNIT VECTORS
C
      IF(S.LE.0.0001D0) RETURN
      DO 1  K=1,3
    1 EN(K) = EN(K)/S
C
C     EN    IS UNIT VECTOR PERPENDICULAR TO PLANE OF EI AND EJ
      RETURN
      END
      FUNCTION DOT(EI,EJ)
C
C     DOT IS THE SCALAR PRODUCT OF TWO UNIT VECTORS EI AND EJ
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION EI(3),EJ(3)
      DOT = EI(1)*EJ(1) + EI(2)*EJ(2) + EI(3)*EJ(3)
      RETURN
      END
      SUBROUTINE LAYOUT(A,KM,KN,M,N)
C
C     LAYOUT PRINTS THE LOWER TRIANGLE OF A SQUARE MATRIX A,
C     OR THE ENTIRE MATRIX IF A IS RECTANGULAR.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION A(KM,KN)
      LHI=0
      IF(M.EQ.N) THEN
    1    LOW=LHI+1
         WRITE(6,200) (JCOL,JCOL=LOW,MIN0(LOW+8,N))
         DO 2  IROW=LOW,N
         LHI=MIN0(IROW,LOW+8)
    2    WRITE(6,201) IROW,(A(JCOL,IROW),JCOL=LOW,MIN0(LOW+8,IROW))
         IF(LHI.LT.N) GO TO 1
      ELSE
    3    LOW=LHI+1
         LHI=MIN0(LOW+8,N)
         WRITE(6,200) (JCOL,JCOL=LOW,LHI)
         DO 4  IROW=1,M
    4    WRITE(6,201) IROW,(A(IROW,JCOL),JCOL=LOW,LHI)
         IF(LHI.LT.N) GO TO 3
      ENDIF
      RETURN
  200 FORMAT(//8X,9(3X,I3,6X)//)
  201 FORMAT(I5,3X,9F12.6)
      END
      SUBROUTINE LINOUT (A,NUMB,IS)
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION  A(MAXDIAG)
C
C      LINOUT PRINTS THE LOWER TRIANGLE OF A SQUARE MATRIX OF 
C      DIMENSION NUMB*NUMB STORED IN A LINEAR ARRAY A OF
C      LENGTH NUMB*(NUMB+1)/2 (IF IS=0) OR LENGTH NUMB*NUMB (IF IS=1).
C
      LIMIT=(NUMB*(NUMB+1))/2
      NA=1
    1 M=MIN0((NUMB+1-NA),9)
      M=NA+M-1
      WRITE(6,201) (I,I=NA,M)
      DO 2  I=NA,NUMB
         IF(IS.EQ.0) THEN
         K=(I*(I-1))/2
         ELSE
         K=NUMB*(I-1)
         ENDIF
         L=MIN0((K+M),(K+I))
         K=K+NA
    2    WRITE(6,202) I,(A(N),N=K,L)
      IF (L.GE.LIMIT) GO TO 3
      NA=M+1
      GO TO 1
    3 RETURN
  201 FORMAT(//8X,9(3X,I3,6X)//)
  202 FORMAT(I5,3X,9F12.6)
      END
      SUBROUTINE PRAX
      INCLUDE 'CAM_SIZE'
C
C     CALCULATE PRINCIPAL MOMENTS OF INERTIA AND CONVERT COORDINATES
C     OF MOLECULE TO A PRINCIPAL-AXIS FRAME WITH ORIGIN AT CENTRE
C     OF MASS
C
C     CALLED ONLY IF OPTION "PRAX" IS SPECIFIED
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION PM(3),CM(3)
      LOGICAL OPTION
      CHARACTER*2 LMNT
      COMMON /BLOC1/ V(MAXDIAG),E(MAXNC,MAXNC),EIG(MAXNC)
      COMMON /GDATA/ X(3,MAXAPO),WT(MAXAPO),SF(MAXNI),
     *INCO(4,MAXNI),LMNT(MAXNAT)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      DATA ZERO,TM3/0.0D0,0.001D0/
      NR=0
      WM=0
      DO 1  I=1,NAT
    1 WM=WM+WT(I)
C
C     WM      IS THE MOLECULAR WEIGHT
C     CALCULATE COORDINATES OF CENTRE OF MASS
C
      DO 3  M=1,3
      CM(M) = ZERO
      DO 2  K=1,NAT
    2 CM(M)=CM(M) + WT(K)*X(M,K)
    3 CM(M)=CM(M)/WM
C
C     CONVERT COORDINATES OF EACH ATOM TO CARTESIANS WITH ORIGIN AT
C     CENTRE OF MASS
C
      DO 4  I=1,3
      DO 4  J=1,NAT
    4 X(I,J)=X(I,J)-CM(I)
C
C      CONVERT TO PRINCIPAL AXES
C      1. DIAGONALISE INERTIA TENSOR
C
      DO 5 I=1,6
    5 V(I)=ZERO
      DO 6  I=1,NAT
      V(1)=V(1)+WT(I)*(X(2,I)**2+X(3,I)**2)
      V(3)=V(3)+WT(I)*(X(1,I)**2+X(3,I)**2)
      V(6)=V(6)+WT(I)*(X(1,I)**2+X(2,I)**2)
      V(2)=V(2)-WT(I)*X(1,I)*X(2,I)
      V(4)=V(4)-WT(I)*X(1,I)*X(3,I)
      V(5)=V(5)-WT(I)*X(2,I)*X(3,I)
    6 CONTINUE
      CALL EIGEN(3,3)
C
C     2.ROTATE CARTESIANS
C       NOTE THAT THE NEW X,Y,Z ARE INERTIAL AXES A,B,C IN THAT ORDER
C
      DO 8  I=1,NAT
      XTEMP=ZERO
      YTEMP=ZERO
      ZTEMP=ZERO
      DO 7  J=1,3
      XTEMP = XTEMP+E(J,1)*X(J,I)
      YTEMP = YTEMP+E(J,2)*X(J,I)
    7 ZTEMP = ZTEMP+E(J,3)*X(J,I)
      X(1,I)= XTEMP
      X(2,I)= YTEMP
      X(3,I)= ZTEMP
    8 CONTINUE
      DO 10  I=1,3
      IF(EIG(I)-TM3) 10,10,9
    9 NR=NR+1
      PM(NR)=EIG(I)
   10 CONTINUE
      WRITE(IW,200) NR,(PM(I),I=1,NR)
      WRITE(IW,203) ((E(I,J),I=1,3),J=1,3)
      WRITE(IW,201)
      DO 11  I=1,NAT
   11 WRITE(IW,202) I,LMNT(I),WT(I),(X(J,I),J=1,3)
      RETURN
  200 FORMAT(1H0,'NO. OF ROTATIONS =',I2,'  PRINCIPAL MOMENTS =',3F16.10
     *,' (AMU X A**2)' )
  201 FORMAT(//' ATOMIC COORDINATES IN PRINCIPAL AXIS SYSTEM'//4X,
     * 'ATOM',6X,'MASS',14X,'A',12X,'B',12X,'C',6X,'ANGSTROM'//)
  202 FORMAT(1X,I2,2X,A4,2X,F10.6,5X,3(3X,F10.6))
  203 FORMAT(//' ROTATION MATRIX TO PRINCIPAL AXIS SYSTEM'//3F20.8/
     * 3F20.8/3F20.8)
      END
      SUBROUTINE COMPAR
      INCLUDE 'CAM_SIZE'
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION OBFR(MAXNINT),DIFF(MAXNINT)
      INTEGER IFR(MAXNINT)
      LOGICAL OPTION
      COMMON /BLOC1/ V(MAXDIAG),EIVR(MAXNC,MAXNC),FREQ(MAXNC)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
      READ(IR,101) (IFR(I),I=1,NINT)
      DO 1  I=1,NINT
      NF = I
      IF(IFR(I).EQ.0) THEN
          NF = NF -1
          GO TO 2
      ENDIF
    1 CONTINUE
    2 READ(IR,102) (OBFR(I),I=1,NF)
      SUMSQ = 0.0D0
      DO 3  I=1,NF
      DIFF(I) = FREQ(IFR(I)) - OBFR(I)
    3 SUMSQ = SUMSQ + DIFF(I)**2
      RMSE = DSQRT( SUMSQ/DFLOAT(NF) )
      WRITE(IW,201) NF,RMSE
      LOW = 1
    4 LHI = LOW + 9
      IF(LHI.GT.NF) LHI = NF
      WRITE(IW,202) (FREQ(IFR(I)),I=LOW,LHI)
      WRITE(IW,203) (OBFR(I),I=LOW,LHI)
      WRITE(IW,204) (DIFF(I),I=LOW,LHI)
      IF(LHI.EQ.NF) GO TO 5
      LOW = LHI + 1
      GO TO 4
    5 RETURN
  101 FORMAT(20I4)
  102 FORMAT(8F10.4)
  201 FORMAT(//' COMPARISON OF CALCULATED AND OBSERVED FREQUENCIES'//5X,
     * 'R.M.S. ERROR FOR ',I2,' MODES = ',F10.2,' CM-1'/)
  202 FORMAT(/5X,'CALC. FREQ. ',3X,10F10.2)
  203 FORMAT(/5X,'OBSD. FREQ. ',3X,10F10.2)
  204 FORMAT(/5X,'DIFFERENCE  ',3X,10F10.2)
      END
      SUBROUTINE REDUND
      INCLUDE 'CAM_SIZE'
C
C     SCHMIDT ORTHOGONALISATION OF THE B MATRIX IN ORDER TO DETERMINE
C     REDUNDANCIES AMONG THE INTERNAL COORDINATES
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION UP(MAXNINT)
      LOGICAL OPTION
      CHARACTER*4 LABS
      CHARACTER*1 LAB1
      COMMON /BLOC2/ U(MAXNINT,MAXNI),B(MAXNI,MAXNC),
     *UB(MAXNINT,MAXNC),P(MAXNINT,MAXNINT),
     *RED(MAXNI,12),IRED(12),LAB2(MAXNI),LABS(MAXNINT),LAB1(MAXNI)
      COMMON /USE/ IR,IW,OPTION(33),NAT,NC,NINT,NI
C     EQUIVALENCE ( UP(1),UB(1,1) )
      DATA TOL/1.0D-06/
      NRED = 0
C
C     OBTAIN THE PRODUCT MATRIX  P = (B) * (B TRANSPOSE)
C
      DO 2  I=1,NI
      DO 2  J=1,NI
      SUM = 0.0D0
      DO 1  K=1,NC
    1 SUM = SUM + B(I,K)*B(J,K)
    2 P(I,J) = SUM
C
C     INITIALISE U AS A UNIT MATRIX
C
      DO 30  J=1,NI
      JM = J - 1
      DO 20  I=1,JM
      U(J,I) = 0.0D0
   20 U(I,J) = 0.0D0
   30 U(J,J) = 1.0D0
C
C     COLUMN 1 OF TRANSFORMATION MATRIX
C
      U(1,1) = 1.0D0/DSQRT(P(1,1))
C
C     COLUMNS 2 TO NI OF TRANSFORMATION MATRIX
C
      DO 110  M=2,NI
      MM1 = M - 1
      DO 40  J=1,MM1
      UP(J) = 0.0D0
      DO 40  I=1,J
   40 UP(J) = UP(J) + U(I,J)*P(I,M)
C
C     CALCULATE NEW VECTOR
C
      DO 60  I=1,MM1
      UIM = 0.0D0
      DO 50  J=1,MM1
   50 UIM = UIM - UP(J)*U(I,J)
   60 U(I,M) = UIM
C
C     CALCULATE SQUARE OF NEW VECTOR
C
      SUM = P(1,1)*U(1,M)**2
      DO 80  L=2,M
      SUMUP = 0.0D0
      LM1 = L - 1
      DO 70  K=1,LM1
   70 SUMUP = SUMUP + U(K,M)*P(K,L)
   80 SUM = SUM + 2.0D0*SUMUP*U(L,M) + P(L,L)*U(L,M)**2
C
C     CHECK FOR LINEAR DEPENDENCY
C
      IF( SUM - TOL ) 100,100,90
   90 SQRTSM = DSQRT(SUM)
C
C     NORMALISE THE NEW VECTOR
C
      DO 95  J=1,M
   95 U(J,M) = U(J,M)/SQRTSM
      GO TO 110
C
C     VECTOR IS NOT INDEPENDENT : THIS YIELDS THE REDUNDANCY CONDITION
C
  100 IF(OPTION(18)) WRITE(IW,201) M,(U(I,M),I=1,NI)
  201 FORMAT(/' REDUNDANCY CONDITION FOR COORDINATE ',I2,' IS :'//
     * (10F12.8))
      NRED = NRED + 1
      IRED(NRED) = M
      DO 105  I=1,NI
  105 RED(I,NRED) = U(I,M)
  110 CONTINUE
      RETURN
      END


